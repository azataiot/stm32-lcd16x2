
lcd16x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004dd0  08004dd0  00014dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e68  08004e68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e70  08004e70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e70  08004e70  00014e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000070  08004ee8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08004ee8  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e48  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ed  00000000  00000000  00036ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  000398d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  0003abc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272dc  00000000  00000000  0003bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cd3  00000000  00000000  0006308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fece8  00000000  00000000  00079d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178a47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a8  00000000  00000000  00178a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004db8 	.word	0x08004db8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004db8 	.word	0x08004db8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x27<<1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f023 030f 	bic.w	r3, r3, #15
 80005d4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f043 030c 	orr.w	r3, r3, #12
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	f043 0308 	orr.w	r3, r3, #8
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005f0:	7bbb      	ldrb	r3, [r7, #14]
 80005f2:	f043 030c 	orr.w	r3, r3, #12
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	f043 0308 	orr.w	r3, r3, #8
 8000600:	b2db      	uxtb	r3, r3
 8000602:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000604:	f107 0208 	add.w	r2, r7, #8
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2304      	movs	r3, #4
 800060e:	214e      	movs	r1, #78	; 0x4e
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <lcd_send_cmd+0x5c>)
 8000612:	f001 f82d 	bl	8001670 <HAL_I2C_Master_Transmit>
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	2000008c 	.word	0x2000008c

08000624 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af02      	add	r7, sp, #8
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f023 030f 	bic.w	r3, r3, #15
 8000634:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	f043 030d 	orr.w	r3, r3, #13
 8000642:	b2db      	uxtb	r3, r3
 8000644:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	f043 0309 	orr.w	r3, r3, #9
 800064c:	b2db      	uxtb	r3, r3
 800064e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000650:	7bbb      	ldrb	r3, [r7, #14]
 8000652:	f043 030d 	orr.w	r3, r3, #13
 8000656:	b2db      	uxtb	r3, r3
 8000658:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	f043 0309 	orr.w	r3, r3, #9
 8000660:	b2db      	uxtb	r3, r3
 8000662:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000664:	f107 0208 	add.w	r2, r7, #8
 8000668:	2364      	movs	r3, #100	; 0x64
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2304      	movs	r3, #4
 800066e:	214e      	movs	r1, #78	; 0x4e
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <lcd_send_data+0x5c>)
 8000672:	f000 fffd 	bl	8001670 <HAL_I2C_Master_Transmit>
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000008c 	.word	0x2000008c

08000684 <lcd_clear>:

void lcd_clear (void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800068a:	2080      	movs	r0, #128	; 0x80
 800068c:	f7ff ff9a 	bl	80005c4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	e005      	b.n	80006a2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000696:	2020      	movs	r0, #32
 8000698:	f7ff ffc4 	bl	8000624 <lcd_send_data>
	for (int i=0; i<70; i++)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b45      	cmp	r3, #69	; 0x45
 80006a6:	ddf6      	ble.n	8000696 <lcd_clear+0x12>
	}
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	6039      	str	r1, [r7, #0]
    switch (row)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d003      	beq.n	80006ca <lcd_put_cur+0x18>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d005      	beq.n	80006d4 <lcd_put_cur+0x22>
 80006c8:	e009      	b.n	80006de <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	603b      	str	r3, [r7, #0]
            break;
 80006d2:	e004      	b.n	80006de <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80006da:	603b      	str	r3, [r7, #0]
            break;
 80006dc:	bf00      	nop
    }

    lcd_send_cmd (col);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff6e 	bl	80005c4 <lcd_send_cmd>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <lcd_init>:


void lcd_init (void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80006f4:	2032      	movs	r0, #50	; 0x32
 80006f6:	f000 fc6d 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006fa:	2030      	movs	r0, #48	; 0x30
 80006fc:	f7ff ff62 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000700:	2005      	movs	r0, #5
 8000702:	f000 fc67 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000706:	2030      	movs	r0, #48	; 0x30
 8000708:	f7ff ff5c 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800070c:	2001      	movs	r0, #1
 800070e:	f000 fc61 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000712:	2030      	movs	r0, #48	; 0x30
 8000714:	f7ff ff56 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(10);
 8000718:	200a      	movs	r0, #10
 800071a:	f000 fc5b 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800071e:	2020      	movs	r0, #32
 8000720:	f7ff ff50 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(10);
 8000724:	200a      	movs	r0, #10
 8000726:	f000 fc55 	bl	8000fd4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800072a:	2028      	movs	r0, #40	; 0x28
 800072c:	f7ff ff4a 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(1);
 8000730:	2001      	movs	r0, #1
 8000732:	f000 fc4f 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000736:	2008      	movs	r0, #8
 8000738:	f7ff ff44 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f000 fc49 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff ff3e 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(1);
 8000748:	2001      	movs	r0, #1
 800074a:	f000 fc43 	bl	8000fd4 <HAL_Delay>
	HAL_Delay(1);
 800074e:	2001      	movs	r0, #1
 8000750:	f000 fc40 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000754:	2006      	movs	r0, #6
 8000756:	f7ff ff35 	bl	80005c4 <lcd_send_cmd>
	HAL_Delay(1);
 800075a:	2001      	movs	r0, #1
 800075c:	f000 fc3a 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000760:	200c      	movs	r0, #12
 8000762:	f7ff ff2f 	bl	80005c4 <lcd_send_cmd>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}

0800076a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000772:	e006      	b.n	8000782 <lcd_send_string+0x18>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff51 	bl	8000624 <lcd_send_data>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1f4      	bne.n	8000774 <lcd_send_string+0xa>
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	; 0x70
 8000798:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800079a:	f000 fbe4 	bl	8000f66 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800079e:	f000 f891 	bl	80008c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007a2:	f000 f965 	bl	8000a70 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 80007a6:	f000 f919 	bl	80009dc <MX_LPUART1_UART_Init>
	MX_I2C1_Init();
 80007aa:	f000 f8d7 	bl	800095c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	// scan for i2c devices
	uint8_t *buf[24] = { 0 };
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2260      	movs	r2, #96	; 0x60
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f003 fe89 	bl	80044cc <memset>
	uint8_t var, ret;
	for (var = 0; var < 127; ++var) {
 80007ba:	2300      	movs	r3, #0
 80007bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80007c0:	e024      	b.n	800080c <main+0x78>
		ret = HAL_I2C_IsDeviceReady(&hi2c1, var << 1, 3, HAL_MAX_DELAY);
 80007c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	b299      	uxth	r1, r3
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295
 80007d0:	2203      	movs	r2, #3
 80007d2:	4835      	ldr	r0, [pc, #212]	; (80008a8 <main+0x114>)
 80007d4:	f001 f840 	bl	8001858 <HAL_I2C_IsDeviceReady>
 80007d8:	4603      	mov	r3, r0
 80007da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (ret != HAL_OK) {
 80007de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d10d      	bne.n	8000802 <main+0x6e>
			// there is no device in this addr (var << 1)
		} else {
			sprintf(buf, "0x%X", var);
 80007e6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	492f      	ldr	r1, [pc, #188]	; (80008ac <main+0x118>)
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 fe74 	bl	80044dc <siprintf>
			HAL_UART_Transmit(&hlpuart1, buf, sizeof(buf), HAL_MAX_DELAY);
 80007f4:	1d39      	adds	r1, r7, #4
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	2260      	movs	r2, #96	; 0x60
 80007fc:	482c      	ldr	r0, [pc, #176]	; (80008b0 <main+0x11c>)
 80007fe:	f002 fff1 	bl	80037e4 <HAL_UART_Transmit>
	for (var = 0; var < 127; ++var) {
 8000802:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000806:	3301      	adds	r3, #1
 8000808:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800080c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000810:	2b7e      	cmp	r3, #126	; 0x7e
 8000812:	d9d6      	bls.n	80007c2 <main+0x2e>
		}
	}
	// end scan

	lcd_init();
 8000814:	f7ff ff6c 	bl	80006f0 <lcd_init>
	lcd_send_string("Hello,World!");
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <main+0x120>)
 800081a:	f7ff ffa6 	bl	800076a <lcd_send_string>
	HAL_Delay(1000);
 800081e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000822:	f000 fbd7 	bl	8000fd4 <HAL_Delay>
	//	lcd_clear();

	lcd_put_cur(1, 0);
 8000826:	2100      	movs	r1, #0
 8000828:	2001      	movs	r0, #1
 800082a:	f7ff ff42 	bl	80006b2 <lcd_put_cur>
	lcd_send_string("from Azat.");
 800082e:	4822      	ldr	r0, [pc, #136]	; (80008b8 <main+0x124>)
 8000830:	f7ff ff9b 	bl	800076a <lcd_send_string>

	HAL_Delay(2000);
 8000834:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000838:	f000 fbcc 	bl	8000fd4 <HAL_Delay>
	lcd_clear();
 800083c:	f7ff ff22 	bl	8000684 <lcd_clear>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		for (int var = 0; var < 128; ++var) {
 8000840:	2300      	movs	r3, #0
 8000842:	66bb      	str	r3, [r7, #104]	; 0x68
 8000844:	e02c      	b.n	80008a0 <main+0x10c>
			lcd_put_cur(row, col);
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <main+0x128>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a1d      	ldr	r2, [pc, #116]	; (80008c0 <main+0x12c>)
 800084c:	6812      	ldr	r2, [r2, #0]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff2e 	bl	80006b2 <lcd_put_cur>
			lcd_send_data(var+48);
 8000856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000858:	b2db      	uxtb	r3, r3
 800085a:	3330      	adds	r3, #48	; 0x30
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fee0 	bl	8000624 <lcd_send_data>
			col++;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <main+0x12c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <main+0x12c>)
 800086c:	6013      	str	r3, [r2, #0]
			if (col > 15) {
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <main+0x12c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b0f      	cmp	r3, #15
 8000874:	dd07      	ble.n	8000886 <main+0xf2>
				row++;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <main+0x128>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <main+0x128>)
 800087e:	6013      	str	r3, [r2, #0]
				col=0;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <main+0x12c>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
			}
			if(row>1){
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <main+0x128>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b01      	cmp	r3, #1
 800088c:	dd02      	ble.n	8000894 <main+0x100>
				row=0;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <main+0x128>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
			}
			HAL_Delay(250);
 8000894:	20fa      	movs	r0, #250	; 0xfa
 8000896:	f000 fb9d 	bl	8000fd4 <HAL_Delay>
		for (int var = 0; var < 128; ++var) {
 800089a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800089c:	3301      	adds	r3, #1
 800089e:	66bb      	str	r3, [r7, #104]	; 0x68
 80008a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008a2:	2b7f      	cmp	r3, #127	; 0x7f
 80008a4:	ddcf      	ble.n	8000846 <main+0xb2>
 80008a6:	e7cb      	b.n	8000840 <main+0xac>
 80008a8:	2000008c 	.word	0x2000008c
 80008ac:	08004dd0 	.word	0x08004dd0
 80008b0:	200000d8 	.word	0x200000d8
 80008b4:	08004dd8 	.word	0x08004dd8
 80008b8:	08004de8 	.word	0x08004de8
 80008bc:	20000168 	.word	0x20000168
 80008c0:	2000016c 	.word	0x2000016c

080008c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	; 0x50
 80008c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008ca:	f107 0318 	add.w	r3, r7, #24
 80008ce:	2238      	movs	r2, #56	; 0x38
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 fdfa 	bl	80044cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f001 fb54 	bl	8001f94 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f6:	2340      	movs	r3, #64	; 0x40
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008fe:	2302      	movs	r3, #2
 8000900:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000902:	2304      	movs	r3, #4
 8000904:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000906:	2355      	movs	r3, #85	; 0x55
 8000908:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090a:	2302      	movs	r3, #2
 800090c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800090e:	2302      	movs	r3, #2
 8000910:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000912:	2302      	movs	r3, #2
 8000914:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	4618      	mov	r0, r3
 800091c:	f001 fbee 	bl	80020fc <HAL_RCC_OscConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x66>
		Error_Handler();
 8000926:	f000 f923 	bl	8000b70 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800092a:	230f      	movs	r3, #15
 800092c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092e:	2303      	movs	r3, #3
 8000930:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2104      	movs	r1, #4
 8000942:	4618      	mov	r0, r3
 8000944:	f001 fef2 	bl	800272c <HAL_RCC_ClockConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x8e>
		Error_Handler();
 800094e:	f000 f90f 	bl	8000b70 <Error_Handler>
	}
}
 8000952:	bf00      	nop
 8000954:	3750      	adds	r7, #80	; 0x50
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <MX_I2C1_Init+0x78>)
 8000964:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x30A0A7FB;
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000968:	4a1b      	ldr	r2, [pc, #108]	; (80009d8 <MX_I2C1_Init+0x7c>)
 800096a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_I2C1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000974:	2201      	movs	r2, #1
 8000976:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_I2C1_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_I2C1_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000998:	f000 fddb 	bl	8001552 <HAL_I2C_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80009a2:	f000 f8e5 	bl	8000b70 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80009a6:	2100      	movs	r1, #0
 80009a8:	4809      	ldr	r0, [pc, #36]	; (80009d0 <MX_I2C1_Init+0x74>)
 80009aa:	f001 fa5b 	bl	8001e64 <HAL_I2CEx_ConfigAnalogFilter>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80009b4:	f000 f8dc 	bl	8000b70 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80009b8:	2100      	movs	r1, #0
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_I2C1_Init+0x74>)
 80009bc:	f001 fa9d 	bl	8001efa <HAL_I2CEx_ConfigDigitalFilter>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_I2C1_Init+0x6e>
		Error_Handler();
 80009c6:	f000 f8d3 	bl	8000b70 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000008c 	.word	0x2000008c
 80009d4:	40005400 	.word	0x40005400
 80009d8:	30a0a7fb 	.word	0x30a0a7fb

080009dc <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80009e0:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_LPUART1_UART_Init+0x8c>)
 80009e2:	4a22      	ldr	r2, [pc, #136]	; (8000a6c <MX_LPUART1_UART_Init+0x90>)
 80009e4:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_LPUART1_UART_Init+0x8c>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_LPUART1_UART_Init+0x8c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_LPUART1_UART_Init+0x8c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_LPUART1_UART_Init+0x8c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_LPUART1_UART_Init+0x8c>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_LPUART1_UART_Init+0x8c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_LPUART1_UART_Init+0x8c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_LPUART1_UART_Init+0x8c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_LPUART1_UART_Init+0x8c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8000a1e:	4812      	ldr	r0, [pc, #72]	; (8000a68 <MX_LPUART1_UART_Init+0x8c>)
 8000a20:	f002 fe90 	bl	8003744 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_LPUART1_UART_Init+0x52>
		Error_Handler();
 8000a2a:	f000 f8a1 	bl	8000b70 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_LPUART1_UART_Init+0x8c>)
 8000a32:	f003 fc57 	bl	80042e4 <HAL_UARTEx_SetTxFifoThreshold>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_LPUART1_UART_Init+0x64>
			!= HAL_OK) {
		Error_Handler();
 8000a3c:	f000 f898 	bl	8000b70 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4809      	ldr	r0, [pc, #36]	; (8000a68 <MX_LPUART1_UART_Init+0x8c>)
 8000a44:	f003 fc8c 	bl	8004360 <HAL_UARTEx_SetRxFifoThreshold>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_LPUART1_UART_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8000a4e:	f000 f88f 	bl	8000b70 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_LPUART1_UART_Init+0x8c>)
 8000a54:	f003 fc0d 	bl	8004272 <HAL_UARTEx_DisableFifoMode>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_LPUART1_UART_Init+0x86>
		Error_Handler();
 8000a5e:	f000 f887 	bl	8000b70 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000d8 	.word	0x200000d8
 8000a6c:	40008000 	.word	0x40008000

08000a70 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4a2e      	ldr	r2, [pc, #184]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4b2c      	ldr	r3, [pc, #176]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9e:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4a28      	ldr	r2, [pc, #160]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000aa4:	f043 0320 	orr.w	r3, r3, #32
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f003 0320 	and.w	r3, r3, #32
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2120      	movs	r1, #32
 8000aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aee:	f000 fcf5 	bl	80014dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000af2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	480f      	ldr	r0, [pc, #60]	; (8000b48 <MX_GPIO_Init+0xd8>)
 8000b0a:	f000 fb65 	bl	80011d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000b0e:	2320      	movs	r3, #32
 8000b10:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b28:	f000 fb56 	bl	80011d8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2028      	movs	r0, #40	; 0x28
 8000b32:	f000 fb29 	bl	8001188 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b36:	2028      	movs	r0, #40	; 0x28
 8000b38:	f000 fb40 	bl	80011bc <HAL_NVIC_EnableIRQ>

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000
 8000b48:	48000800 	.word	0x48000800

08000b4c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b5e:	f000 fa1b 	bl	8000f98 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40001000 	.word	0x40001000

08000b70 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bb2:	f001 fa93 	bl	80020dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b09e      	sub	sp, #120	; 0x78
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	2254      	movs	r2, #84	; 0x54
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 fc71 	bl	80044cc <memset>
  if(hi2c->Instance==I2C1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <HAL_I2C_MspInit+0xa8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d136      	bne.n	8000c62 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bf4:	2340      	movs	r3, #64	; 0x40
 8000bf6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 ffe1 	bl	8002bc8 <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c0c:	f7ff ffb0 	bl	8000b70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <HAL_I2C_MspInit+0xac>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c14:	4a16      	ldr	r2, [pc, #88]	; (8000c70 <HAL_I2C_MspInit+0xac>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_I2C_MspInit+0xac>)
 8000c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c2c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2e:	2312      	movs	r3, #18
 8000c30:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c42:	4619      	mov	r1, r3
 8000c44:	480b      	ldr	r0, [pc, #44]	; (8000c74 <HAL_I2C_MspInit+0xb0>)
 8000c46:	f000 fac7 	bl	80011d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_I2C_MspInit+0xac>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <HAL_I2C_MspInit+0xac>)
 8000c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c54:	6593      	str	r3, [r2, #88]	; 0x58
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_I2C_MspInit+0xac>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3778      	adds	r7, #120	; 0x78
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40005400 	.word	0x40005400
 8000c70:	40021000 	.word	0x40021000
 8000c74:	48000400 	.word	0x48000400

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b09e      	sub	sp, #120	; 0x78
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	2254      	movs	r2, #84	; 0x54
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 fc17 	bl	80044cc <memset>
  if(huart->Instance==LPUART1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <HAL_UART_MspInit+0xa8>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d136      	bne.n	8000d16 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ca8:	2320      	movs	r3, #32
 8000caa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 ff87 	bl	8002bc8 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc0:	f7ff ff56 	bl	8000b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <HAL_UART_MspInit+0xac>)
 8000cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cc8:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <HAL_UART_MspInit+0xac>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <HAL_UART_MspInit+0xac>)
 8000cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_UART_MspInit+0xac>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce0:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <HAL_UART_MspInit+0xac>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_UART_MspInit+0xac>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d04:	230c      	movs	r3, #12
 8000d06:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d12:	f000 fa61 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3778      	adds	r7, #120	; 0x78
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40008000 	.word	0x40008000
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <HAL_InitTick+0xcc>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d42:	4a2c      	ldr	r2, [pc, #176]	; (8000df4 <HAL_InitTick+0xcc>)
 8000d44:	f043 0310 	orr.w	r3, r3, #16
 8000d48:	6593      	str	r3, [r2, #88]	; 0x58
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <HAL_InitTick+0xcc>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4e:	f003 0310 	and.w	r3, r3, #16
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d56:	f107 020c 	add.w	r2, r7, #12
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f001 feb9 	bl	8002ad8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d66:	f001 fe8b 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8000d6a:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6e:	4a22      	ldr	r2, [pc, #136]	; (8000df8 <HAL_InitTick+0xd0>)
 8000d70:	fba2 2303 	umull	r2, r3, r2, r3
 8000d74:	0c9b      	lsrs	r3, r3, #18
 8000d76:	3b01      	subs	r3, #1
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d7a:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <HAL_InitTick+0xd4>)
 8000d7c:	4a20      	ldr	r2, [pc, #128]	; (8000e00 <HAL_InitTick+0xd8>)
 8000d7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d80:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <HAL_InitTick+0xd4>)
 8000d82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d86:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d88:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <HAL_InitTick+0xd4>)
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <HAL_InitTick+0xd4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_InitTick+0xd4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000d9a:	4818      	ldr	r0, [pc, #96]	; (8000dfc <HAL_InitTick+0xd4>)
 8000d9c:	f002 f962 	bl	8003064 <HAL_TIM_Base_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000da6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d11b      	bne.n	8000de6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dae:	4813      	ldr	r0, [pc, #76]	; (8000dfc <HAL_InitTick+0xd4>)
 8000db0:	f002 f9ba 	bl	8003128 <HAL_TIM_Base_Start_IT>
 8000db4:	4603      	mov	r3, r0
 8000db6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000dba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d111      	bne.n	8000de6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dc2:	2036      	movs	r0, #54	; 0x36
 8000dc4:	f000 f9fa 	bl	80011bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b0f      	cmp	r3, #15
 8000dcc:	d808      	bhi.n	8000de0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	2036      	movs	r0, #54	; 0x36
 8000dd4:	f000 f9d8 	bl	8001188 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_InitTick+0xdc>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e002      	b.n	8000de6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8000de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3730      	adds	r7, #48	; 0x30
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000
 8000df8:	431bde83 	.word	0x431bde83
 8000dfc:	20000170 	.word	0x20000170
 8000e00:	40001000 	.word	0x40001000
 8000e04:	20000004 	.word	0x20000004

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <NMI_Handler+0x4>

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e62:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e66:	f000 fb51 	bl	800150c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <TIM6_DAC_IRQHandler+0x10>)
 8000e76:	f002 f9cf 	bl	8003218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000170 	.word	0x20000170

08000e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e8c:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <_sbrk+0x5c>)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <_sbrk+0x60>)
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <_sbrk+0x64>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <_sbrk+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d207      	bcs.n	8000ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb4:	f003 fae0 	bl	8004478 <__errno>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	220c      	movs	r2, #12
 8000ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	e009      	b.n	8000ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <_sbrk+0x64>)
 8000ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20020000 	.word	0x20020000
 8000ee4:	00000400 	.word	0x00000400
 8000ee8:	200001bc 	.word	0x200001bc
 8000eec:	200001d8 	.word	0x200001d8

08000ef0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f1a:	490e      	ldr	r1, [pc, #56]	; (8000f54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <LoopForever+0xe>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f30:	4c0b      	ldr	r4, [pc, #44]	; (8000f60 <LoopForever+0x16>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f3e:	f7ff ffd7 	bl	8000ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f003 fa9f 	bl	8004484 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f46:	f7ff fc25 	bl	8000794 <main>

08000f4a <LoopForever>:

LoopForever:
    b LoopForever
 8000f4a:	e7fe      	b.n	8000f4a <LoopForever>
  ldr   r0, =_estack
 8000f4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f58:	08004e78 	.word	0x08004e78
  ldr r2, =_sbss
 8000f5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f60:	200001d4 	.word	0x200001d4

08000f64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC1_2_IRQHandler>

08000f66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 f8fe 	bl	8001172 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f76:	200f      	movs	r0, #15
 8000f78:	f7ff fed6 	bl	8000d28 <HAL_InitTick>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	e001      	b.n	8000f8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f88:	f7ff fdf8 	bl	8000b7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f8c:	79fb      	ldrb	r3, [r7, #7]

}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_IncTick+0x1c>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_IncTick+0x20>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a03      	ldr	r2, [pc, #12]	; (8000fb4 <HAL_IncTick+0x1c>)
 8000fa8:	6013      	str	r3, [r2, #0]
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	200001c0 	.word	0x200001c0
 8000fb8:	20000008 	.word	0x20000008

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200001c0 	.word	0x200001c0

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d004      	beq.n	8000ff8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_Delay+0x40>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff8:	bf00      	nop
 8000ffa:	f7ff ffdf 	bl	8000fbc <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	429a      	cmp	r2, r3
 8001008:	d8f7      	bhi.n	8000ffa <HAL_Delay+0x26>
  {
  }
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000008 	.word	0x20000008

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4907      	ldr	r1, [pc, #28]	; (80010b4 <__NVIC_EnableIRQ+0x38>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff4c 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001196:	f7ff ff63 	bl	8001060 <__NVIC_GetPriorityGrouping>
 800119a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	6978      	ldr	r0, [r7, #20]
 80011a2:	f7ff ffb3 	bl	800110c <NVIC_EncodePriority>
 80011a6:	4602      	mov	r2, r0
 80011a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff82 	bl	80010b8 <__NVIC_SetPriority>
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff56 	bl	800107c <__NVIC_EnableIRQ>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011e6:	e15a      	b.n	800149e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	2101      	movs	r1, #1
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	4013      	ands	r3, r2
 80011f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 814c 	beq.w	8001498 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b01      	cmp	r3, #1
 800120a:	d005      	beq.n	8001218 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001214:	2b02      	cmp	r3, #2
 8001216:	d130      	bne.n	800127a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800124e:	2201      	movs	r2, #1
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	091b      	lsrs	r3, r3, #4
 8001264:	f003 0201 	and.w	r2, r3, #1
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b03      	cmp	r3, #3
 8001284:	d017      	beq.n	80012b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d123      	bne.n	800130a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	691a      	ldr	r2, [r3, #16]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	08da      	lsrs	r2, r3, #3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3208      	adds	r2, #8
 8001304:	6939      	ldr	r1, [r7, #16]
 8001306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0203 	and.w	r2, r3, #3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 80a6 	beq.w	8001498 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134c:	4b5b      	ldr	r3, [pc, #364]	; (80014bc <HAL_GPIO_Init+0x2e4>)
 800134e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001350:	4a5a      	ldr	r2, [pc, #360]	; (80014bc <HAL_GPIO_Init+0x2e4>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6613      	str	r3, [r2, #96]	; 0x60
 8001358:	4b58      	ldr	r3, [pc, #352]	; (80014bc <HAL_GPIO_Init+0x2e4>)
 800135a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001364:	4a56      	ldr	r2, [pc, #344]	; (80014c0 <HAL_GPIO_Init+0x2e8>)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	3302      	adds	r3, #2
 800136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	220f      	movs	r2, #15
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800138e:	d01f      	beq.n	80013d0 <HAL_GPIO_Init+0x1f8>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a4c      	ldr	r2, [pc, #304]	; (80014c4 <HAL_GPIO_Init+0x2ec>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d019      	beq.n	80013cc <HAL_GPIO_Init+0x1f4>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a4b      	ldr	r2, [pc, #300]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d013      	beq.n	80013c8 <HAL_GPIO_Init+0x1f0>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a4a      	ldr	r2, [pc, #296]	; (80014cc <HAL_GPIO_Init+0x2f4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d00d      	beq.n	80013c4 <HAL_GPIO_Init+0x1ec>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a49      	ldr	r2, [pc, #292]	; (80014d0 <HAL_GPIO_Init+0x2f8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d007      	beq.n	80013c0 <HAL_GPIO_Init+0x1e8>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a48      	ldr	r2, [pc, #288]	; (80014d4 <HAL_GPIO_Init+0x2fc>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d101      	bne.n	80013bc <HAL_GPIO_Init+0x1e4>
 80013b8:	2305      	movs	r3, #5
 80013ba:	e00a      	b.n	80013d2 <HAL_GPIO_Init+0x1fa>
 80013bc:	2306      	movs	r3, #6
 80013be:	e008      	b.n	80013d2 <HAL_GPIO_Init+0x1fa>
 80013c0:	2304      	movs	r3, #4
 80013c2:	e006      	b.n	80013d2 <HAL_GPIO_Init+0x1fa>
 80013c4:	2303      	movs	r3, #3
 80013c6:	e004      	b.n	80013d2 <HAL_GPIO_Init+0x1fa>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e002      	b.n	80013d2 <HAL_GPIO_Init+0x1fa>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <HAL_GPIO_Init+0x1fa>
 80013d0:	2300      	movs	r3, #0
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	f002 0203 	and.w	r2, r2, #3
 80013d8:	0092      	lsls	r2, r2, #2
 80013da:	4093      	lsls	r3, r2
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e2:	4937      	ldr	r1, [pc, #220]	; (80014c0 <HAL_GPIO_Init+0x2e8>)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	3302      	adds	r3, #2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013f0:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <HAL_GPIO_Init+0x300>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001414:	4a30      	ldr	r2, [pc, #192]	; (80014d8 <HAL_GPIO_Init+0x300>)
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <HAL_GPIO_Init+0x300>)
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800143e:	4a26      	ldr	r2, [pc, #152]	; (80014d8 <HAL_GPIO_Init+0x300>)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <HAL_GPIO_Init+0x300>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001468:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <HAL_GPIO_Init+0x300>)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <HAL_GPIO_Init+0x300>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001492:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <HAL_GPIO_Init+0x300>)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3301      	adds	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	fa22 f303 	lsr.w	r3, r2, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f47f ae9d 	bne.w	80011e8 <HAL_GPIO_Init+0x10>
  }
}
 80014ae:	bf00      	nop
 80014b0:	bf00      	nop
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010000 	.word	0x40010000
 80014c4:	48000400 	.word	0x48000400
 80014c8:	48000800 	.word	0x48000800
 80014cc:	48000c00 	.word	0x48000c00
 80014d0:	48001000 	.word	0x48001000
 80014d4:	48001400 	.word	0x48001400
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d006      	beq.n	8001530 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f806 	bl	800153c <HAL_GPIO_EXTI_Callback>
  }
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40010400 	.word	0x40010400

0800153c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e081      	b.n	8001668 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d106      	bne.n	800157e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff fb23 	bl	8000bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2224      	movs	r2, #36	; 0x24
 8001582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0201 	bic.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d107      	bne.n	80015cc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	e006      	b.n	80015da <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d104      	bne.n	80015ec <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015fe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800160e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69d9      	ldr	r1, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1a      	ldr	r2, [r3, #32]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 0201 	orr.w	r2, r2, #1
 8001648:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2220      	movs	r2, #32
 8001654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af02      	add	r7, sp, #8
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	461a      	mov	r2, r3
 800167c:	460b      	mov	r3, r1
 800167e:	817b      	strh	r3, [r7, #10]
 8001680:	4613      	mov	r3, r2
 8001682:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b20      	cmp	r3, #32
 800168e:	f040 80da 	bne.w	8001846 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_I2C_Master_Transmit+0x30>
 800169c:	2302      	movs	r3, #2
 800169e:	e0d3      	b.n	8001848 <HAL_I2C_Master_Transmit+0x1d8>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016a8:	f7ff fc88 	bl	8000fbc <HAL_GetTick>
 80016ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2319      	movs	r3, #25
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f9f7 	bl	8001aae <I2C_WaitOnFlagUntilTimeout>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0be      	b.n	8001848 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2221      	movs	r2, #33	; 0x21
 80016ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2210      	movs	r2, #16
 80016d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	893a      	ldrh	r2, [r7, #8]
 80016ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	2bff      	cmp	r3, #255	; 0xff
 80016fa:	d90e      	bls.n	800171a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	22ff      	movs	r2, #255	; 0xff
 8001700:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001706:	b2da      	uxtb	r2, r3
 8001708:	8979      	ldrh	r1, [r7, #10]
 800170a:	4b51      	ldr	r3, [pc, #324]	; (8001850 <HAL_I2C_Master_Transmit+0x1e0>)
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 fb74 	bl	8001e00 <I2C_TransferConfig>
 8001718:	e06c      	b.n	80017f4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171e:	b29a      	uxth	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	b2da      	uxtb	r2, r3
 800172a:	8979      	ldrh	r1, [r7, #10]
 800172c:	4b48      	ldr	r3, [pc, #288]	; (8001850 <HAL_I2C_Master_Transmit+0x1e0>)
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 fb63 	bl	8001e00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800173a:	e05b      	b.n	80017f4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	6a39      	ldr	r1, [r7, #32]
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f000 f9f4 	bl	8001b2e <I2C_WaitOnTXISFlagUntilTimeout>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e07b      	b.n	8001848 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176a:	b29b      	uxth	r3, r3
 800176c:	3b01      	subs	r3, #1
 800176e:	b29a      	uxth	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001778:	3b01      	subs	r3, #1
 800177a:	b29a      	uxth	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001784:	b29b      	uxth	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d034      	beq.n	80017f4 <HAL_I2C_Master_Transmit+0x184>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178e:	2b00      	cmp	r3, #0
 8001790:	d130      	bne.n	80017f4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	2200      	movs	r2, #0
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 f986 	bl	8001aae <I2C_WaitOnFlagUntilTimeout>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e04d      	b.n	8001848 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	2bff      	cmp	r3, #255	; 0xff
 80017b4:	d90e      	bls.n	80017d4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	22ff      	movs	r2, #255	; 0xff
 80017ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	8979      	ldrh	r1, [r7, #10]
 80017c4:	2300      	movs	r3, #0
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 fb17 	bl	8001e00 <I2C_TransferConfig>
 80017d2:	e00f      	b.n	80017f4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	8979      	ldrh	r1, [r7, #10]
 80017e6:	2300      	movs	r3, #0
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 fb06 	bl	8001e00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d19e      	bne.n	800173c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	6a39      	ldr	r1, [r7, #32]
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 f9d3 	bl	8001bae <I2C_WaitOnSTOPFlagUntilTimeout>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e01a      	b.n	8001848 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2220      	movs	r2, #32
 8001818:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6859      	ldr	r1, [r3, #4]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_I2C_Master_Transmit+0x1e4>)
 8001826:	400b      	ands	r3, r1
 8001828:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2220      	movs	r2, #32
 800182e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e000      	b.n	8001848 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001846:	2302      	movs	r3, #2
  }
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	80002000 	.word	0x80002000
 8001854:	fe00e800 	.word	0xfe00e800

08001858 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	460b      	mov	r3, r1
 8001866:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b20      	cmp	r3, #32
 8001876:	f040 80f1 	bne.w	8001a5c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001888:	d101      	bne.n	800188e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800188a:	2302      	movs	r3, #2
 800188c:	e0e7      	b.n	8001a5e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_I2C_IsDeviceReady+0x44>
 8001898:	2302      	movs	r3, #2
 800189a:	e0e0      	b.n	8001a5e <HAL_I2C_IsDeviceReady+0x206>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2224      	movs	r2, #36	; 0x24
 80018a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d107      	bne.n	80018ca <HAL_I2C_IsDeviceReady+0x72>
 80018ba:	897b      	ldrh	r3, [r7, #10]
 80018bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018c8:	e004      	b.n	80018d4 <HAL_I2C_IsDeviceReady+0x7c>
 80018ca:	897b      	ldrh	r3, [r7, #10]
 80018cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018d0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80018da:	f7ff fb6f 	bl	8000fbc <HAL_GetTick>
 80018de:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f003 0320 	and.w	r3, r3, #32
 80018ea:	2b20      	cmp	r3, #32
 80018ec:	bf0c      	ite	eq
 80018ee:	2301      	moveq	r3, #1
 80018f0:	2300      	movne	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	2b10      	cmp	r3, #16
 8001902:	bf0c      	ite	eq
 8001904:	2301      	moveq	r3, #1
 8001906:	2300      	movne	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800190c:	e034      	b.n	8001978 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001914:	d01a      	beq.n	800194c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001916:	f7ff fb51 	bl	8000fbc <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d302      	bcc.n	800192c <HAL_I2C_IsDeviceReady+0xd4>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10f      	bne.n	800194c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2220      	movs	r2, #32
 8001930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	f043 0220 	orr.w	r2, r3, #32
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e088      	b.n	8001a5e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	f003 0320 	and.w	r3, r3, #32
 8001956:	2b20      	cmp	r3, #32
 8001958:	bf0c      	ite	eq
 800195a:	2301      	moveq	r3, #1
 800195c:	2300      	movne	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0310 	and.w	r3, r3, #16
 800196c:	2b10      	cmp	r3, #16
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001978:	7ffb      	ldrb	r3, [r7, #31]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <HAL_I2C_IsDeviceReady+0x12c>
 800197e:	7fbb      	ldrb	r3, [r7, #30]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0c4      	beq.n	800190e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f003 0310 	and.w	r3, r3, #16
 800198e:	2b10      	cmp	r3, #16
 8001990:	d01a      	beq.n	80019c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2200      	movs	r2, #0
 800199a:	2120      	movs	r1, #32
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f886 	bl	8001aae <I2C_WaitOnFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e058      	b.n	8001a5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2220      	movs	r2, #32
 80019b2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2220      	movs	r2, #32
 80019b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e04a      	b.n	8001a5e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2200      	movs	r2, #0
 80019d0:	2120      	movs	r1, #32
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f86b 	bl	8001aae <I2C_WaitOnFlagUntilTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e03d      	b.n	8001a5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2210      	movs	r2, #16
 80019e8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2220      	movs	r2, #32
 80019f0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d118      	bne.n	8001a2c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a08:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2200      	movs	r2, #0
 8001a12:	2120      	movs	r1, #32
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f84a 	bl	8001aae <I2C_WaitOnFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e01c      	b.n	8001a5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	f63f af3b 	bhi.w	80018b2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	f043 0220 	orr.w	r2, r3, #32
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001a5c:	2302      	movs	r3, #2
  }
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3720      	adds	r7, #32
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d103      	bne.n	8001a84 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2200      	movs	r2, #0
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d007      	beq.n	8001aa2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0201 	orr.w	r2, r2, #1
 8001aa0:	619a      	str	r2, [r3, #24]
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4613      	mov	r3, r2
 8001abc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001abe:	e022      	b.n	8001b06 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac6:	d01e      	beq.n	8001b06 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac8:	f7ff fa78 	bl	8000fbc <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d302      	bcc.n	8001ade <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d113      	bne.n	8001b06 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f043 0220 	orr.w	r2, r3, #32
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2220      	movs	r2, #32
 8001aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00f      	b.n	8001b26 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699a      	ldr	r2, [r3, #24]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	bf0c      	ite	eq
 8001b16:	2301      	moveq	r3, #1
 8001b18:	2300      	movne	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d0cd      	beq.n	8001ac0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b3a:	e02c      	b.n	8001b96 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	68b9      	ldr	r1, [r7, #8]
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f871 	bl	8001c28 <I2C_IsErrorOccurred>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e02a      	b.n	8001ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b56:	d01e      	beq.n	8001b96 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b58:	f7ff fa30 	bl	8000fbc <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d302      	bcc.n	8001b6e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d113      	bne.n	8001b96 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f043 0220 	orr.w	r2, r3, #32
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e007      	b.n	8001ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d1cb      	bne.n	8001b3c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bba:	e028      	b.n	8001c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 f831 	bl	8001c28 <I2C_IsErrorOccurred>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e026      	b.n	8001c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd0:	f7ff f9f4 	bl	8000fbc <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d302      	bcc.n	8001be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d113      	bne.n	8001c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f043 0220 	orr.w	r2, r3, #32
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e007      	b.n	8001c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	d1cf      	bne.n	8001bbc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d075      	beq.n	8001d40 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2210      	movs	r2, #16
 8001c5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c5c:	e056      	b.n	8001d0c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d052      	beq.n	8001d0c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c66:	f7ff f9a9 	bl	8000fbc <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d302      	bcc.n	8001c7c <I2C_IsErrorOccurred+0x54>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d147      	bne.n	8001d0c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c9e:	d12e      	bne.n	8001cfe <I2C_IsErrorOccurred+0xd6>
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ca6:	d02a      	beq.n	8001cfe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001ca8:	7cfb      	ldrb	r3, [r7, #19]
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	d027      	beq.n	8001cfe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cbc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001cbe:	f7ff f97d 	bl	8000fbc <HAL_GetTick>
 8001cc2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cc4:	e01b      	b.n	8001cfe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001cc6:	f7ff f979 	bl	8000fbc <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b19      	cmp	r3, #25
 8001cd2:	d914      	bls.n	8001cfe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	f043 0220 	orr.w	r2, r3, #32
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0320 	and.w	r3, r3, #32
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	d1dc      	bne.n	8001cc6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	d003      	beq.n	8001d22 <I2C_IsErrorOccurred+0xfa>
 8001d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d09d      	beq.n	8001c5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d103      	bne.n	8001d32 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00b      	beq.n	8001d6a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00b      	beq.n	8001d8c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	f043 0308 	orr.w	r3, r3, #8
 8001d7a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d01c      	beq.n	8001df0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f7ff fe55 	bl	8001a66 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6859      	ldr	r1, [r3, #4]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <I2C_IsErrorOccurred+0x1d4>)
 8001dc8:	400b      	ands	r3, r1
 8001dca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3728      	adds	r7, #40	; 0x28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	fe00e800 	.word	0xfe00e800

08001e00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	817b      	strh	r3, [r7, #10]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e12:	897b      	ldrh	r3, [r7, #10]
 8001e14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e18:	7a7b      	ldrb	r3, [r7, #9]
 8001e1a:	041b      	lsls	r3, r3, #16
 8001e1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e20:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e2e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	0d5b      	lsrs	r3, r3, #21
 8001e3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <I2C_TransferConfig+0x60>)
 8001e40:	430b      	orrs	r3, r1
 8001e42:	43db      	mvns	r3, r3
 8001e44:	ea02 0103 	and.w	r1, r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e52:	bf00      	nop
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	03ff63ff 	.word	0x03ff63ff

08001e64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	d138      	bne.n	8001eec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e032      	b.n	8001eee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2224      	movs	r2, #36	; 0x24
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6819      	ldr	r1, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e000      	b.n	8001eee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001eec:	2302      	movs	r3, #2
  }
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b085      	sub	sp, #20
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b20      	cmp	r3, #32
 8001f0e:	d139      	bne.n	8001f84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e033      	b.n	8001f86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2224      	movs	r2, #36	; 0x24
 8001f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	e000      	b.n	8001f86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f84:	2302      	movs	r3, #2
  }
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d141      	bne.n	8002026 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fa2:	4b4b      	ldr	r3, [pc, #300]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fae:	d131      	bne.n	8002014 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fb0:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fb6:	4a46      	ldr	r2, [pc, #280]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fc0:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fc8:	4a41      	ldr	r2, [pc, #260]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fd0:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2232      	movs	r2, #50	; 0x32
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	4a3f      	ldr	r2, [pc, #252]	; (80020d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	0c9b      	lsrs	r3, r3, #18
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe6:	e002      	b.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fee:	4b38      	ldr	r3, [pc, #224]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffa:	d102      	bne.n	8002002 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f2      	bne.n	8001fe8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002002:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200e:	d158      	bne.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e057      	b.n	80020c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002014:	4b2e      	ldr	r3, [pc, #184]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800201a:	4a2d      	ldr	r2, [pc, #180]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002020:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002024:	e04d      	b.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202c:	d141      	bne.n	80020b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800202e:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800203a:	d131      	bne.n	80020a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800203c:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002042:	4a23      	ldr	r2, [pc, #140]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002048:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800204c:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002054:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800205a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2232      	movs	r2, #50	; 0x32
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	4a1c      	ldr	r2, [pc, #112]	; (80020d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	0c9b      	lsrs	r3, r3, #18
 800206e:	3301      	adds	r3, #1
 8002070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002072:	e002      	b.n	800207a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3b01      	subs	r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002086:	d102      	bne.n	800208e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f2      	bne.n	8002074 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209a:	d112      	bne.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e011      	b.n	80020c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020b0:	e007      	b.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	40007000 	.word	0x40007000
 80020d4:	20000000 	.word	0x20000000
 80020d8:	431bde83 	.word	0x431bde83

080020dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ea:	6093      	str	r3, [r2, #8]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40007000 	.word	0x40007000

080020fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e306      	b.n	800271c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d075      	beq.n	8002206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211a:	4b97      	ldr	r3, [pc, #604]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002124:	4b94      	ldr	r3, [pc, #592]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b0c      	cmp	r3, #12
 8002132:	d102      	bne.n	800213a <HAL_RCC_OscConfig+0x3e>
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b03      	cmp	r3, #3
 8002138:	d002      	beq.n	8002140 <HAL_RCC_OscConfig+0x44>
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2b08      	cmp	r3, #8
 800213e:	d10b      	bne.n	8002158 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	4b8d      	ldr	r3, [pc, #564]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d05b      	beq.n	8002204 <HAL_RCC_OscConfig+0x108>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d157      	bne.n	8002204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e2e1      	b.n	800271c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	d106      	bne.n	8002170 <HAL_RCC_OscConfig+0x74>
 8002162:	4b85      	ldr	r3, [pc, #532]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a84      	ldr	r2, [pc, #528]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e01d      	b.n	80021ac <HAL_RCC_OscConfig+0xb0>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x98>
 800217a:	4b7f      	ldr	r3, [pc, #508]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a7e      	ldr	r2, [pc, #504]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b7c      	ldr	r3, [pc, #496]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a7b      	ldr	r2, [pc, #492]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0xb0>
 8002194:	4b78      	ldr	r3, [pc, #480]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a77      	ldr	r2, [pc, #476]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 800219a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b75      	ldr	r3, [pc, #468]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a74      	ldr	r2, [pc, #464]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 80021a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d013      	beq.n	80021dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe ff02 	bl	8000fbc <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7fe fefe 	bl	8000fbc <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e2a6      	b.n	800271c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ce:	4b6a      	ldr	r3, [pc, #424]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0xc0>
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe feee 	bl	8000fbc <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7fe feea 	bl	8000fbc <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e292      	b.n	800271c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021f6:	4b60      	ldr	r3, [pc, #384]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0xe8>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d075      	beq.n	80022fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002212:	4b59      	ldr	r3, [pc, #356]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800221c:	4b56      	ldr	r3, [pc, #344]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b0c      	cmp	r3, #12
 800222a:	d102      	bne.n	8002232 <HAL_RCC_OscConfig+0x136>
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d002      	beq.n	8002238 <HAL_RCC_OscConfig+0x13c>
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b04      	cmp	r3, #4
 8002236:	d11f      	bne.n	8002278 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002238:	4b4f      	ldr	r3, [pc, #316]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_OscConfig+0x154>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e265      	b.n	800271c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b49      	ldr	r3, [pc, #292]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	4946      	ldr	r1, [pc, #280]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002264:	4b45      	ldr	r3, [pc, #276]	; (800237c <HAL_RCC_OscConfig+0x280>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe fd5d 	bl	8000d28 <HAL_InitTick>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d043      	beq.n	80022fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e251      	b.n	800271c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d023      	beq.n	80022c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002280:	4b3d      	ldr	r3, [pc, #244]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a3c      	ldr	r2, [pc, #240]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe fe96 	bl	8000fbc <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7fe fe92 	bl	8000fbc <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e23a      	b.n	800271c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a6:	4b34      	ldr	r3, [pc, #208]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b31      	ldr	r3, [pc, #196]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	061b      	lsls	r3, r3, #24
 80022c0:	492d      	ldr	r1, [pc, #180]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
 80022c6:	e01a      	b.n	80022fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c8:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a2a      	ldr	r2, [pc, #168]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 80022ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe fe72 	bl	8000fbc <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022dc:	f7fe fe6e 	bl	8000fbc <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e216      	b.n	800271c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022ee:	4b22      	ldr	r3, [pc, #136]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x1e0>
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d041      	beq.n	800238e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d01c      	beq.n	800234c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002318:	4a17      	ldr	r2, [pc, #92]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002322:	f7fe fe4b 	bl	8000fbc <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232a:	f7fe fe47 	bl	8000fbc <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e1ef      	b.n	800271c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 800233e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0ef      	beq.n	800232a <HAL_RCC_OscConfig+0x22e>
 800234a:	e020      	b.n	800238e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002352:	4a09      	ldr	r2, [pc, #36]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7fe fe2e 	bl	8000fbc <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002362:	e00d      	b.n	8002380 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002364:	f7fe fe2a 	bl	8000fbc <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d906      	bls.n	8002380 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1d2      	b.n	800271c <HAL_RCC_OscConfig+0x620>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002380:	4b8c      	ldr	r3, [pc, #560]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1ea      	bne.n	8002364 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80a6 	beq.w	80024e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239c:	2300      	movs	r3, #0
 800239e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023a0:	4b84      	ldr	r3, [pc, #528]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_OscConfig+0x2b4>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x2b6>
 80023b0:	2300      	movs	r3, #0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00d      	beq.n	80023d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	4b7f      	ldr	r3, [pc, #508]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	4a7e      	ldr	r2, [pc, #504]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6593      	str	r3, [r2, #88]	; 0x58
 80023c2:	4b7c      	ldr	r3, [pc, #496]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023ce:	2301      	movs	r3, #1
 80023d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d2:	4b79      	ldr	r3, [pc, #484]	; (80025b8 <HAL_RCC_OscConfig+0x4bc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d118      	bne.n	8002410 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023de:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_RCC_OscConfig+0x4bc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a75      	ldr	r2, [pc, #468]	; (80025b8 <HAL_RCC_OscConfig+0x4bc>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ea:	f7fe fde7 	bl	8000fbc <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7fe fde3 	bl	8000fbc <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e18b      	b.n	800271c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002404:	4b6c      	ldr	r3, [pc, #432]	; (80025b8 <HAL_RCC_OscConfig+0x4bc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d108      	bne.n	800242a <HAL_RCC_OscConfig+0x32e>
 8002418:	4b66      	ldr	r3, [pc, #408]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	4a65      	ldr	r2, [pc, #404]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002428:	e024      	b.n	8002474 <HAL_RCC_OscConfig+0x378>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b05      	cmp	r3, #5
 8002430:	d110      	bne.n	8002454 <HAL_RCC_OscConfig+0x358>
 8002432:	4b60      	ldr	r3, [pc, #384]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002438:	4a5e      	ldr	r2, [pc, #376]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002442:	4b5c      	ldr	r3, [pc, #368]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	4a5a      	ldr	r2, [pc, #360]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002452:	e00f      	b.n	8002474 <HAL_RCC_OscConfig+0x378>
 8002454:	4b57      	ldr	r3, [pc, #348]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	4a56      	ldr	r2, [pc, #344]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002464:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246a:	4a52      	ldr	r2, [pc, #328]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d016      	beq.n	80024aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247c:	f7fe fd9e 	bl	8000fbc <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002482:	e00a      	b.n	800249a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002484:	f7fe fd9a 	bl	8000fbc <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e140      	b.n	800271c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800249a:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0ed      	beq.n	8002484 <HAL_RCC_OscConfig+0x388>
 80024a8:	e015      	b.n	80024d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024aa:	f7fe fd87 	bl	8000fbc <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7fe fd83 	bl	8000fbc <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e129      	b.n	800271c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024c8:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1ed      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024d6:	7ffb      	ldrb	r3, [r7, #31]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4b35      	ldr	r3, [pc, #212]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	4a34      	ldr	r2, [pc, #208]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80024e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d03c      	beq.n	800256e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01c      	beq.n	8002536 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024fc:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80024fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002502:	4a2c      	ldr	r2, [pc, #176]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7fe fd56 	bl	8000fbc <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002514:	f7fe fd52 	bl	8000fbc <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e0fa      	b.n	800271c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002526:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002528:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ef      	beq.n	8002514 <HAL_RCC_OscConfig+0x418>
 8002534:	e01b      	b.n	800256e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002536:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002538:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800253c:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002546:	f7fe fd39 	bl	8000fbc <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800254e:	f7fe fd35 	bl	8000fbc <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e0dd      	b.n	800271c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002562:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1ef      	bne.n	800254e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 80d1 	beq.w	800271a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b0c      	cmp	r3, #12
 8002582:	f000 808b 	beq.w	800269c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d15e      	bne.n	800264c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002594:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe fd0f 	bl	8000fbc <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a0:	e00c      	b.n	80025bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a2:	f7fe fd0b 	bl	8000fbc <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d905      	bls.n	80025bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e0b3      	b.n	800271c <HAL_RCC_OscConfig+0x620>
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025bc:	4b59      	ldr	r3, [pc, #356]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ec      	bne.n	80025a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c8:	4b56      	ldr	r3, [pc, #344]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	4b56      	ldr	r3, [pc, #344]	; (8002728 <HAL_RCC_OscConfig+0x62c>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6a11      	ldr	r1, [r2, #32]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025d8:	3a01      	subs	r2, #1
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	4311      	orrs	r1, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80025e2:	0212      	lsls	r2, r2, #8
 80025e4:	4311      	orrs	r1, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025ea:	0852      	lsrs	r2, r2, #1
 80025ec:	3a01      	subs	r2, #1
 80025ee:	0552      	lsls	r2, r2, #21
 80025f0:	4311      	orrs	r1, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025f6:	0852      	lsrs	r2, r2, #1
 80025f8:	3a01      	subs	r2, #1
 80025fa:	0652      	lsls	r2, r2, #25
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002602:	06d2      	lsls	r2, r2, #27
 8002604:	430a      	orrs	r2, r1
 8002606:	4947      	ldr	r1, [pc, #284]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 8002608:	4313      	orrs	r3, r2
 800260a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800260c:	4b45      	ldr	r3, [pc, #276]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a44      	ldr	r2, [pc, #272]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 8002612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002616:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002618:	4b42      	ldr	r3, [pc, #264]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a41      	ldr	r2, [pc, #260]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 800261e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002622:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe fcca 	bl	8000fbc <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fcc6 	bl	8000fbc <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e06e      	b.n	800271c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263e:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x530>
 800264a:	e066      	b.n	800271a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264c:	4b35      	ldr	r3, [pc, #212]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a34      	ldr	r2, [pc, #208]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 8002652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002656:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002658:	4b32      	ldr	r3, [pc, #200]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4a31      	ldr	r2, [pc, #196]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 800265e:	f023 0303 	bic.w	r3, r3, #3
 8002662:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002664:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a2e      	ldr	r2, [pc, #184]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 800266a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800266e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002672:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7fe fca2 	bl	8000fbc <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267c:	f7fe fc9e 	bl	8000fbc <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e046      	b.n	800271c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800268e:	4b25      	ldr	r3, [pc, #148]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x580>
 800269a:	e03e      	b.n	800271a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e039      	b.n	800271c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_RCC_OscConfig+0x628>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 0203 	and.w	r2, r3, #3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d12c      	bne.n	8002716 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	3b01      	subs	r3, #1
 80026c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d123      	bne.n	8002716 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d11b      	bne.n	8002716 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d113      	bne.n	8002716 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	085b      	lsrs	r3, r3, #1
 80026fa:	3b01      	subs	r3, #1
 80026fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d109      	bne.n	8002716 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270c:	085b      	lsrs	r3, r3, #1
 800270e:	3b01      	subs	r3, #1
 8002710:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002712:	429a      	cmp	r2, r3
 8002714:	d001      	beq.n	800271a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	019f800c 	.word	0x019f800c

0800272c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e11e      	b.n	8002982 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002744:	4b91      	ldr	r3, [pc, #580]	; (800298c <HAL_RCC_ClockConfig+0x260>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d910      	bls.n	8002774 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b8e      	ldr	r3, [pc, #568]	; (800298c <HAL_RCC_ClockConfig+0x260>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 020f 	bic.w	r2, r3, #15
 800275a:	498c      	ldr	r1, [pc, #560]	; (800298c <HAL_RCC_ClockConfig+0x260>)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b8a      	ldr	r3, [pc, #552]	; (800298c <HAL_RCC_ClockConfig+0x260>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e106      	b.n	8002982 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d073      	beq.n	8002868 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d129      	bne.n	80027dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002788:	4b81      	ldr	r3, [pc, #516]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0f4      	b.n	8002982 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002798:	f000 f9d0 	bl	8002b3c <RCC_GetSysClockFreqFromPLLSource>
 800279c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4a7c      	ldr	r2, [pc, #496]	; (8002994 <HAL_RCC_ClockConfig+0x268>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d93f      	bls.n	8002826 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027a6:	4b7a      	ldr	r3, [pc, #488]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d033      	beq.n	8002826 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d12f      	bne.n	8002826 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027c6:	4b72      	ldr	r3, [pc, #456]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ce:	4a70      	ldr	r2, [pc, #448]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 80027d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	e024      	b.n	8002826 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027e4:	4b6a      	ldr	r3, [pc, #424]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d109      	bne.n	8002804 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0c6      	b.n	8002982 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f4:	4b66      	ldr	r3, [pc, #408]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0be      	b.n	8002982 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002804:	f000 f8ce 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8002808:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4a61      	ldr	r2, [pc, #388]	; (8002994 <HAL_RCC_ClockConfig+0x268>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d909      	bls.n	8002826 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002812:	4b5f      	ldr	r3, [pc, #380]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800281a:	4a5d      	ldr	r2, [pc, #372]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 800281c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002820:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002826:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f023 0203 	bic.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4957      	ldr	r1, [pc, #348]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002834:	4313      	orrs	r3, r2
 8002836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002838:	f7fe fbc0 	bl	8000fbc <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	e00a      	b.n	8002856 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7fe fbbc 	bl	8000fbc <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e095      	b.n	8002982 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	4b4e      	ldr	r3, [pc, #312]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 020c 	and.w	r2, r3, #12
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	429a      	cmp	r2, r3
 8002866:	d1eb      	bne.n	8002840 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d023      	beq.n	80028bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002880:	4b43      	ldr	r3, [pc, #268]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4a42      	ldr	r2, [pc, #264]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002886:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800288a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002898:	4b3d      	ldr	r3, [pc, #244]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80028a0:	4a3b      	ldr	r2, [pc, #236]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 80028a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a8:	4b39      	ldr	r3, [pc, #228]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4936      	ldr	r1, [pc, #216]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
 80028ba:	e008      	b.n	80028ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b80      	cmp	r3, #128	; 0x80
 80028c0:	d105      	bne.n	80028ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80028c2:	4b33      	ldr	r3, [pc, #204]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4a32      	ldr	r2, [pc, #200]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 80028c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028ce:	4b2f      	ldr	r3, [pc, #188]	; (800298c <HAL_RCC_ClockConfig+0x260>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d21d      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028dc:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_ClockConfig+0x260>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 020f 	bic.w	r2, r3, #15
 80028e4:	4929      	ldr	r1, [pc, #164]	; (800298c <HAL_RCC_ClockConfig+0x260>)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028ec:	f7fe fb66 	bl	8000fbc <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	e00a      	b.n	800290a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f4:	f7fe fb62 	bl	8000fbc <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e03b      	b.n	8002982 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_RCC_ClockConfig+0x260>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d1ed      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002924:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4917      	ldr	r1, [pc, #92]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002942:	4b13      	ldr	r3, [pc, #76]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	490f      	ldr	r1, [pc, #60]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002956:	f000 f825 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 800295a:	4602      	mov	r2, r0
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <HAL_RCC_ClockConfig+0x264>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	490c      	ldr	r1, [pc, #48]	; (8002998 <HAL_RCC_ClockConfig+0x26c>)
 8002968:	5ccb      	ldrb	r3, [r1, r3]
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	fa22 f303 	lsr.w	r3, r2, r3
 8002972:	4a0a      	ldr	r2, [pc, #40]	; (800299c <HAL_RCC_ClockConfig+0x270>)
 8002974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_RCC_ClockConfig+0x274>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe f9d4 	bl	8000d28 <HAL_InitTick>
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40022000 	.word	0x40022000
 8002990:	40021000 	.word	0x40021000
 8002994:	04c4b400 	.word	0x04c4b400
 8002998:	08004df4 	.word	0x08004df4
 800299c:	20000000 	.word	0x20000000
 80029a0:	20000004 	.word	0x20000004

080029a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029aa:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d102      	bne.n	80029bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029b6:	4b2a      	ldr	r3, [pc, #168]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	e047      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029bc:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d102      	bne.n	80029ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029c8:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	e03e      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80029ce:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d136      	bne.n	8002a48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029da:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	3301      	adds	r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d10c      	bne.n	8002a12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029f8:	4a1a      	ldr	r2, [pc, #104]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a00:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a02:	68d2      	ldr	r2, [r2, #12]
 8002a04:	0a12      	lsrs	r2, r2, #8
 8002a06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	617b      	str	r3, [r7, #20]
      break;
 8002a10:	e00c      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a12:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	4a10      	ldr	r2, [pc, #64]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a1c:	68d2      	ldr	r2, [r2, #12]
 8002a1e:	0a12      	lsrs	r2, r2, #8
 8002a20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	617b      	str	r3, [r7, #20]
      break;
 8002a2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0e5b      	lsrs	r3, r3, #25
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	3301      	adds	r3, #1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	e001      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a4c:	693b      	ldr	r3, [r7, #16]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	00f42400 	.word	0x00f42400
 8002a64:	016e3600 	.word	0x016e3600

08002a68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000000 	.word	0x20000000

08002a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a84:	f7ff fff0 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4904      	ldr	r1, [pc, #16]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	08004e04 	.word	0x08004e04

08002aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ab0:	f7ff ffda 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0adb      	lsrs	r3, r3, #11
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4904      	ldr	r1, [pc, #16]	; (8002ad4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ac2:	5ccb      	ldrb	r3, [r1, r3]
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	08004e04 	.word	0x08004e04

08002ad8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <HAL_RCC_GetClockConfig+0x5c>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0203 	and.w	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <HAL_RCC_GetClockConfig+0x5c>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <HAL_RCC_GetClockConfig+0x5c>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b0c:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <HAL_RCC_GetClockConfig+0x5c>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	08db      	lsrs	r3, r3, #3
 8002b12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <HAL_RCC_GetClockConfig+0x60>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 020f 	and.w	r2, r3, #15
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	601a      	str	r2, [r3, #0]
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40022000 	.word	0x40022000

08002b3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3301      	adds	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d10c      	bne.n	8002b7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b60:	4a17      	ldr	r2, [pc, #92]	; (8002bc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b68:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b6a:	68d2      	ldr	r2, [r2, #12]
 8002b6c:	0a12      	lsrs	r2, r2, #8
 8002b6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b72:	fb02 f303 	mul.w	r3, r2, r3
 8002b76:	617b      	str	r3, [r7, #20]
    break;
 8002b78:	e00c      	b.n	8002b94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b7a:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b82:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b84:	68d2      	ldr	r2, [r2, #12]
 8002b86:	0a12      	lsrs	r2, r2, #8
 8002b88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]
    break;
 8002b92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	0e5b      	lsrs	r3, r3, #25
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002bae:	687b      	ldr	r3, [r7, #4]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	016e3600 	.word	0x016e3600
 8002bc4:	00f42400 	.word	0x00f42400

08002bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8098 	beq.w	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bea:	4b43      	ldr	r3, [pc, #268]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10d      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf6:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfa:	4a3f      	ldr	r2, [pc, #252]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c00:	6593      	str	r3, [r2, #88]	; 0x58
 8002c02:	4b3d      	ldr	r3, [pc, #244]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c12:	4b3a      	ldr	r3, [pc, #232]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a39      	ldr	r2, [pc, #228]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c1e:	f7fe f9cd 	bl	8000fbc <HAL_GetTick>
 8002c22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c24:	e009      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c26:	f7fe f9c9 	bl	8000fbc <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d902      	bls.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	74fb      	strb	r3, [r7, #19]
        break;
 8002c38:	e005      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c3a:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0ef      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c46:	7cfb      	ldrb	r3, [r7, #19]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d159      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c4c:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d01e      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d019      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c68:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c74:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c84:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c94:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d016      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7fe f989 	bl	8000fbc <HAL_GetTick>
 8002caa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cac:	e00b      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7fe f985 	bl	8000fbc <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d902      	bls.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	74fb      	strb	r3, [r7, #19]
            break;
 8002cc4:	e006      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0ec      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10b      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce8:	4903      	ldr	r1, [pc, #12]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cf0:	e008      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cf2:	7cfb      	ldrb	r3, [r7, #19]
 8002cf4:	74bb      	strb	r3, [r7, #18]
 8002cf6:	e005      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d04:	7c7b      	ldrb	r3, [r7, #17]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d105      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0a:	4ba7      	ldr	r3, [pc, #668]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0e:	4aa6      	ldr	r2, [pc, #664]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d22:	4ba1      	ldr	r3, [pc, #644]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d28:	f023 0203 	bic.w	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	499d      	ldr	r1, [pc, #628]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d44:	4b98      	ldr	r3, [pc, #608]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	f023 020c 	bic.w	r2, r3, #12
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	4995      	ldr	r1, [pc, #596]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d66:	4b90      	ldr	r3, [pc, #576]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	498c      	ldr	r1, [pc, #560]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d88:	4b87      	ldr	r3, [pc, #540]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	4984      	ldr	r1, [pc, #528]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002daa:	4b7f      	ldr	r3, [pc, #508]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	497b      	ldr	r1, [pc, #492]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dcc:	4b76      	ldr	r3, [pc, #472]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	4973      	ldr	r1, [pc, #460]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dee:	4b6e      	ldr	r3, [pc, #440]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	496a      	ldr	r1, [pc, #424]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e10:	4b65      	ldr	r3, [pc, #404]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4962      	ldr	r1, [pc, #392]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e32:	4b5d      	ldr	r3, [pc, #372]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	4959      	ldr	r1, [pc, #356]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e54:	4b54      	ldr	r3, [pc, #336]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e5a:	f023 0203 	bic.w	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	4951      	ldr	r1, [pc, #324]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e76:	4b4c      	ldr	r3, [pc, #304]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	4948      	ldr	r1, [pc, #288]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d015      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e98:	4b43      	ldr	r3, [pc, #268]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4940      	ldr	r1, [pc, #256]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eb8:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4a3a      	ldr	r2, [pc, #232]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ec2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d015      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ed0:	4b35      	ldr	r3, [pc, #212]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ede:	4932      	ldr	r1, [pc, #200]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eee:	d105      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002efa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d015      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f08:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	4924      	ldr	r1, [pc, #144]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f26:	d105      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f28:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a1e      	ldr	r2, [pc, #120]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d015      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f40:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4e:	4916      	ldr	r1, [pc, #88]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4a10      	ldr	r2, [pc, #64]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d019      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4908      	ldr	r1, [pc, #32]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f96:	d109      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4a02      	ldr	r2, [pc, #8]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fa2:	60d3      	str	r3, [r2, #12]
 8002fa4:	e002      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fb8:	4b29      	ldr	r3, [pc, #164]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	4926      	ldr	r1, [pc, #152]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fd6:	d105      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fd8:	4b21      	ldr	r3, [pc, #132]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a20      	ldr	r2, [pc, #128]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d015      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffe:	4918      	ldr	r1, [pc, #96]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800300a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300e:	d105      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a12      	ldr	r2, [pc, #72]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003028:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800302a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800302e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	490a      	ldr	r1, [pc, #40]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003046:	d105      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a04      	ldr	r2, [pc, #16]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800304e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003052:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003054:	7cbb      	ldrb	r3, [r7, #18]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000

08003064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e049      	b.n	800310a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f841 	bl	8003112 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f000 fa60 	bl	8003568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d001      	beq.n	8003140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e054      	b.n	80031ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d022      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0x80>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316a:	d01d      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0x80>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a22      	ldr	r2, [pc, #136]	; (80031fc <HAL_TIM_Base_Start_IT+0xd4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d018      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0x80>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a21      	ldr	r2, [pc, #132]	; (8003200 <HAL_TIM_Base_Start_IT+0xd8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d013      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0x80>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1f      	ldr	r2, [pc, #124]	; (8003204 <HAL_TIM_Base_Start_IT+0xdc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00e      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0x80>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1e      	ldr	r2, [pc, #120]	; (8003208 <HAL_TIM_Base_Start_IT+0xe0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d009      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0x80>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a1c      	ldr	r2, [pc, #112]	; (800320c <HAL_TIM_Base_Start_IT+0xe4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d004      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0x80>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1b      	ldr	r2, [pc, #108]	; (8003210 <HAL_TIM_Base_Start_IT+0xe8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d115      	bne.n	80031d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_TIM_Base_Start_IT+0xec>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d015      	beq.n	80031e6 <HAL_TIM_Base_Start_IT+0xbe>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c0:	d011      	beq.n	80031e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0201 	orr.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d2:	e008      	b.n	80031e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e000      	b.n	80031e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	40000400 	.word	0x40000400
 8003200:	40000800 	.word	0x40000800
 8003204:	40000c00 	.word	0x40000c00
 8003208:	40013400 	.word	0x40013400
 800320c:	40014000 	.word	0x40014000
 8003210:	40015000 	.word	0x40015000
 8003214:	00010007 	.word	0x00010007

08003218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b02      	cmp	r3, #2
 800322c:	d122      	bne.n	8003274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b02      	cmp	r3, #2
 800323a:	d11b      	bne.n	8003274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0202 	mvn.w	r2, #2
 8003244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f965 	bl	800352a <HAL_TIM_IC_CaptureCallback>
 8003260:	e005      	b.n	800326e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f957 	bl	8003516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f968 	bl	800353e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b04      	cmp	r3, #4
 8003280:	d122      	bne.n	80032c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b04      	cmp	r3, #4
 800328e:	d11b      	bne.n	80032c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0204 	mvn.w	r2, #4
 8003298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f93b 	bl	800352a <HAL_TIM_IC_CaptureCallback>
 80032b4:	e005      	b.n	80032c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f92d 	bl	8003516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f93e 	bl	800353e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d122      	bne.n	800331c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d11b      	bne.n	800331c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0208 	mvn.w	r2, #8
 80032ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2204      	movs	r2, #4
 80032f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f911 	bl	800352a <HAL_TIM_IC_CaptureCallback>
 8003308:	e005      	b.n	8003316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f903 	bl	8003516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f914 	bl	800353e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b10      	cmp	r3, #16
 8003328:	d122      	bne.n	8003370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b10      	cmp	r3, #16
 8003336:	d11b      	bne.n	8003370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0210 	mvn.w	r2, #16
 8003340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2208      	movs	r2, #8
 8003346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8e7 	bl	800352a <HAL_TIM_IC_CaptureCallback>
 800335c:	e005      	b.n	800336a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f8d9 	bl	8003516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f8ea 	bl	800353e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d10e      	bne.n	800339c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b01      	cmp	r3, #1
 800338a:	d107      	bne.n	800339c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0201 	mvn.w	r2, #1
 8003394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd fbd8 	bl	8000b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a6:	2b80      	cmp	r3, #128	; 0x80
 80033a8:	d10e      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	2b80      	cmp	r3, #128	; 0x80
 80033b6:	d107      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f982 	bl	80036cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d6:	d10e      	bne.n	80033f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e2:	2b80      	cmp	r3, #128	; 0x80
 80033e4:	d107      	bne.n	80033f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f975 	bl	80036e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d10e      	bne.n	8003422 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d107      	bne.n	8003422 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800341a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f898 	bl	8003552 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b20      	cmp	r3, #32
 800342e:	d10e      	bne.n	800344e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b20      	cmp	r3, #32
 800343c:	d107      	bne.n	800344e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f06f 0220 	mvn.w	r2, #32
 8003446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f935 	bl	80036b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003458:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800345c:	d10f      	bne.n	800347e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800346c:	d107      	bne.n	800347e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f93b 	bl	80036f4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003488:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800348c:	d10f      	bne.n	80034ae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800349c:	d107      	bne.n	80034ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80034a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f92d 	bl	8003708 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034bc:	d10f      	bne.n	80034de <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034cc:	d107      	bne.n	80034de <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80034d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f91f 	bl	800371c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ec:	d10f      	bne.n	800350e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034fc:	d107      	bne.n	800350e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f911 	bl	8003730 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
	...

08003568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a46      	ldr	r2, [pc, #280]	; (8003694 <TIM_Base_SetConfig+0x12c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d017      	beq.n	80035b0 <TIM_Base_SetConfig+0x48>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003586:	d013      	beq.n	80035b0 <TIM_Base_SetConfig+0x48>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a43      	ldr	r2, [pc, #268]	; (8003698 <TIM_Base_SetConfig+0x130>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00f      	beq.n	80035b0 <TIM_Base_SetConfig+0x48>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a42      	ldr	r2, [pc, #264]	; (800369c <TIM_Base_SetConfig+0x134>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00b      	beq.n	80035b0 <TIM_Base_SetConfig+0x48>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a41      	ldr	r2, [pc, #260]	; (80036a0 <TIM_Base_SetConfig+0x138>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d007      	beq.n	80035b0 <TIM_Base_SetConfig+0x48>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a40      	ldr	r2, [pc, #256]	; (80036a4 <TIM_Base_SetConfig+0x13c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_Base_SetConfig+0x48>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3f      	ldr	r2, [pc, #252]	; (80036a8 <TIM_Base_SetConfig+0x140>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d108      	bne.n	80035c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a33      	ldr	r2, [pc, #204]	; (8003694 <TIM_Base_SetConfig+0x12c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d023      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d01f      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a30      	ldr	r2, [pc, #192]	; (8003698 <TIM_Base_SetConfig+0x130>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01b      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2f      	ldr	r2, [pc, #188]	; (800369c <TIM_Base_SetConfig+0x134>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d017      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a2e      	ldr	r2, [pc, #184]	; (80036a0 <TIM_Base_SetConfig+0x138>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2d      	ldr	r2, [pc, #180]	; (80036a4 <TIM_Base_SetConfig+0x13c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00f      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2d      	ldr	r2, [pc, #180]	; (80036ac <TIM_Base_SetConfig+0x144>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00b      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2c      	ldr	r2, [pc, #176]	; (80036b0 <TIM_Base_SetConfig+0x148>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2b      	ldr	r2, [pc, #172]	; (80036b4 <TIM_Base_SetConfig+0x14c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a26      	ldr	r2, [pc, #152]	; (80036a8 <TIM_Base_SetConfig+0x140>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d108      	bne.n	8003624 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a12      	ldr	r2, [pc, #72]	; (8003694 <TIM_Base_SetConfig+0x12c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <TIM_Base_SetConfig+0x110>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <TIM_Base_SetConfig+0x13c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00f      	beq.n	8003678 <TIM_Base_SetConfig+0x110>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a14      	ldr	r2, [pc, #80]	; (80036ac <TIM_Base_SetConfig+0x144>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00b      	beq.n	8003678 <TIM_Base_SetConfig+0x110>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <TIM_Base_SetConfig+0x148>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d007      	beq.n	8003678 <TIM_Base_SetConfig+0x110>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <TIM_Base_SetConfig+0x14c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d003      	beq.n	8003678 <TIM_Base_SetConfig+0x110>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a0d      	ldr	r2, [pc, #52]	; (80036a8 <TIM_Base_SetConfig+0x140>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d103      	bne.n	8003680 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	615a      	str	r2, [r3, #20]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40012c00 	.word	0x40012c00
 8003698:	40000400 	.word	0x40000400
 800369c:	40000800 	.word	0x40000800
 80036a0:	40000c00 	.word	0x40000c00
 80036a4:	40013400 	.word	0x40013400
 80036a8:	40015000 	.word	0x40015000
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40014400 	.word	0x40014400
 80036b4:	40014800 	.word	0x40014800

080036b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e042      	b.n	80037dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800375c:	2b00      	cmp	r3, #0
 800375e:	d106      	bne.n	800376e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7fd fa85 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2224      	movs	r2, #36	; 0x24
 8003772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0201 	bic.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8c2 	bl	8003910 <UART_SetConfig>
 800378c:	4603      	mov	r3, r0
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e022      	b.n	80037dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fbb2 	bl	8003f08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fc39 	bl	800404c <UART_CheckIdleState>
 80037da:	4603      	mov	r3, r0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	; 0x28
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	4613      	mov	r3, r2
 80037f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	f040 8083 	bne.w	8003906 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_UART_Transmit+0x28>
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e07b      	b.n	8003908 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_UART_Transmit+0x3a>
 800381a:	2302      	movs	r3, #2
 800381c:	e074      	b.n	8003908 <HAL_UART_Transmit+0x124>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2221      	movs	r2, #33	; 0x21
 8003832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003836:	f7fd fbc1 	bl	8000fbc <HAL_GetTick>
 800383a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	88fa      	ldrh	r2, [r7, #6]
 8003840:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	88fa      	ldrh	r2, [r7, #6]
 8003848:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003854:	d108      	bne.n	8003868 <HAL_UART_Transmit+0x84>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d104      	bne.n	8003868 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	e003      	b.n	8003870 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800386c:	2300      	movs	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003878:	e02c      	b.n	80038d4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	2180      	movs	r1, #128	; 0x80
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fc2c 	bl	80040e2 <UART_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e039      	b.n	8003908 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10b      	bne.n	80038b2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	3302      	adds	r3, #2
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	e007      	b.n	80038c2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	3301      	adds	r3, #1
 80038c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1cc      	bne.n	800387a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2200      	movs	r2, #0
 80038e8:	2140      	movs	r1, #64	; 0x40
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fbf9 	bl	80040e2 <UART_WaitOnFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e006      	b.n	8003908 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	e000      	b.n	8003908 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003906:	2302      	movs	r3, #2
  }
}
 8003908:	4618      	mov	r0, r3
 800390a:	3720      	adds	r7, #32
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003914:	b08c      	sub	sp, #48	; 0x30
 8003916:	af00      	add	r7, sp, #0
 8003918:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	431a      	orrs	r2, r3
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	431a      	orrs	r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	4313      	orrs	r3, r2
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4baa      	ldr	r3, [pc, #680]	; (8003be8 <UART_SetConfig+0x2d8>)
 8003940:	4013      	ands	r3, r2
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003948:	430b      	orrs	r3, r1
 800394a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a9f      	ldr	r2, [pc, #636]	; (8003bec <UART_SetConfig+0x2dc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d004      	beq.n	800397c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003978:	4313      	orrs	r3, r2
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003986:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003990:	430b      	orrs	r3, r1
 8003992:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	f023 010f 	bic.w	r1, r3, #15
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a90      	ldr	r2, [pc, #576]	; (8003bf0 <UART_SetConfig+0x2e0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d125      	bne.n	8003a00 <UART_SetConfig+0xf0>
 80039b4:	4b8f      	ldr	r3, [pc, #572]	; (8003bf4 <UART_SetConfig+0x2e4>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d81a      	bhi.n	80039f8 <UART_SetConfig+0xe8>
 80039c2:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <UART_SetConfig+0xb8>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	080039d9 	.word	0x080039d9
 80039cc:	080039e9 	.word	0x080039e9
 80039d0:	080039e1 	.word	0x080039e1
 80039d4:	080039f1 	.word	0x080039f1
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039de:	e116      	b.n	8003c0e <UART_SetConfig+0x2fe>
 80039e0:	2302      	movs	r3, #2
 80039e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039e6:	e112      	b.n	8003c0e <UART_SetConfig+0x2fe>
 80039e8:	2304      	movs	r3, #4
 80039ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ee:	e10e      	b.n	8003c0e <UART_SetConfig+0x2fe>
 80039f0:	2308      	movs	r3, #8
 80039f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039f6:	e10a      	b.n	8003c0e <UART_SetConfig+0x2fe>
 80039f8:	2310      	movs	r3, #16
 80039fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039fe:	e106      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a7c      	ldr	r2, [pc, #496]	; (8003bf8 <UART_SetConfig+0x2e8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d138      	bne.n	8003a7c <UART_SetConfig+0x16c>
 8003a0a:	4b7a      	ldr	r3, [pc, #488]	; (8003bf4 <UART_SetConfig+0x2e4>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b0c      	cmp	r3, #12
 8003a16:	d82d      	bhi.n	8003a74 <UART_SetConfig+0x164>
 8003a18:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <UART_SetConfig+0x110>)
 8003a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1e:	bf00      	nop
 8003a20:	08003a55 	.word	0x08003a55
 8003a24:	08003a75 	.word	0x08003a75
 8003a28:	08003a75 	.word	0x08003a75
 8003a2c:	08003a75 	.word	0x08003a75
 8003a30:	08003a65 	.word	0x08003a65
 8003a34:	08003a75 	.word	0x08003a75
 8003a38:	08003a75 	.word	0x08003a75
 8003a3c:	08003a75 	.word	0x08003a75
 8003a40:	08003a5d 	.word	0x08003a5d
 8003a44:	08003a75 	.word	0x08003a75
 8003a48:	08003a75 	.word	0x08003a75
 8003a4c:	08003a75 	.word	0x08003a75
 8003a50:	08003a6d 	.word	0x08003a6d
 8003a54:	2300      	movs	r3, #0
 8003a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a5a:	e0d8      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a62:	e0d4      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003a64:	2304      	movs	r3, #4
 8003a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a6a:	e0d0      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a72:	e0cc      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003a74:	2310      	movs	r3, #16
 8003a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a7a:	e0c8      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a5e      	ldr	r2, [pc, #376]	; (8003bfc <UART_SetConfig+0x2ec>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d125      	bne.n	8003ad2 <UART_SetConfig+0x1c2>
 8003a86:	4b5b      	ldr	r3, [pc, #364]	; (8003bf4 <UART_SetConfig+0x2e4>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a90:	2b30      	cmp	r3, #48	; 0x30
 8003a92:	d016      	beq.n	8003ac2 <UART_SetConfig+0x1b2>
 8003a94:	2b30      	cmp	r3, #48	; 0x30
 8003a96:	d818      	bhi.n	8003aca <UART_SetConfig+0x1ba>
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d00a      	beq.n	8003ab2 <UART_SetConfig+0x1a2>
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d814      	bhi.n	8003aca <UART_SetConfig+0x1ba>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <UART_SetConfig+0x19a>
 8003aa4:	2b10      	cmp	r3, #16
 8003aa6:	d008      	beq.n	8003aba <UART_SetConfig+0x1aa>
 8003aa8:	e00f      	b.n	8003aca <UART_SetConfig+0x1ba>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ab0:	e0ad      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ab8:	e0a9      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003aba:	2304      	movs	r3, #4
 8003abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ac0:	e0a5      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ac8:	e0a1      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003aca:	2310      	movs	r3, #16
 8003acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ad0:	e09d      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a4a      	ldr	r2, [pc, #296]	; (8003c00 <UART_SetConfig+0x2f0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d125      	bne.n	8003b28 <UART_SetConfig+0x218>
 8003adc:	4b45      	ldr	r3, [pc, #276]	; (8003bf4 <UART_SetConfig+0x2e4>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ae6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ae8:	d016      	beq.n	8003b18 <UART_SetConfig+0x208>
 8003aea:	2bc0      	cmp	r3, #192	; 0xc0
 8003aec:	d818      	bhi.n	8003b20 <UART_SetConfig+0x210>
 8003aee:	2b80      	cmp	r3, #128	; 0x80
 8003af0:	d00a      	beq.n	8003b08 <UART_SetConfig+0x1f8>
 8003af2:	2b80      	cmp	r3, #128	; 0x80
 8003af4:	d814      	bhi.n	8003b20 <UART_SetConfig+0x210>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <UART_SetConfig+0x1f0>
 8003afa:	2b40      	cmp	r3, #64	; 0x40
 8003afc:	d008      	beq.n	8003b10 <UART_SetConfig+0x200>
 8003afe:	e00f      	b.n	8003b20 <UART_SetConfig+0x210>
 8003b00:	2300      	movs	r3, #0
 8003b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b06:	e082      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b0e:	e07e      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003b10:	2304      	movs	r3, #4
 8003b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b16:	e07a      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003b18:	2308      	movs	r3, #8
 8003b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b1e:	e076      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003b20:	2310      	movs	r3, #16
 8003b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b26:	e072      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a35      	ldr	r2, [pc, #212]	; (8003c04 <UART_SetConfig+0x2f4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d12a      	bne.n	8003b88 <UART_SetConfig+0x278>
 8003b32:	4b30      	ldr	r3, [pc, #192]	; (8003bf4 <UART_SetConfig+0x2e4>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b40:	d01a      	beq.n	8003b78 <UART_SetConfig+0x268>
 8003b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b46:	d81b      	bhi.n	8003b80 <UART_SetConfig+0x270>
 8003b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b4c:	d00c      	beq.n	8003b68 <UART_SetConfig+0x258>
 8003b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b52:	d815      	bhi.n	8003b80 <UART_SetConfig+0x270>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <UART_SetConfig+0x250>
 8003b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5c:	d008      	beq.n	8003b70 <UART_SetConfig+0x260>
 8003b5e:	e00f      	b.n	8003b80 <UART_SetConfig+0x270>
 8003b60:	2300      	movs	r3, #0
 8003b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b66:	e052      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b6e:	e04e      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003b70:	2304      	movs	r3, #4
 8003b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b76:	e04a      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003b78:	2308      	movs	r3, #8
 8003b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b7e:	e046      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003b80:	2310      	movs	r3, #16
 8003b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b86:	e042      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a17      	ldr	r2, [pc, #92]	; (8003bec <UART_SetConfig+0x2dc>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d13a      	bne.n	8003c08 <UART_SetConfig+0x2f8>
 8003b92:	4b18      	ldr	r3, [pc, #96]	; (8003bf4 <UART_SetConfig+0x2e4>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ba0:	d01a      	beq.n	8003bd8 <UART_SetConfig+0x2c8>
 8003ba2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ba6:	d81b      	bhi.n	8003be0 <UART_SetConfig+0x2d0>
 8003ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bac:	d00c      	beq.n	8003bc8 <UART_SetConfig+0x2b8>
 8003bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb2:	d815      	bhi.n	8003be0 <UART_SetConfig+0x2d0>
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <UART_SetConfig+0x2b0>
 8003bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbc:	d008      	beq.n	8003bd0 <UART_SetConfig+0x2c0>
 8003bbe:	e00f      	b.n	8003be0 <UART_SetConfig+0x2d0>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bc6:	e022      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bce:	e01e      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bd6:	e01a      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003bd8:	2308      	movs	r3, #8
 8003bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bde:	e016      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003be0:	2310      	movs	r3, #16
 8003be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003be6:	e012      	b.n	8003c0e <UART_SetConfig+0x2fe>
 8003be8:	cfff69f3 	.word	0xcfff69f3
 8003bec:	40008000 	.word	0x40008000
 8003bf0:	40013800 	.word	0x40013800
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40004400 	.word	0x40004400
 8003bfc:	40004800 	.word	0x40004800
 8003c00:	40004c00 	.word	0x40004c00
 8003c04:	40005000 	.word	0x40005000
 8003c08:	2310      	movs	r3, #16
 8003c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4aae      	ldr	r2, [pc, #696]	; (8003ecc <UART_SetConfig+0x5bc>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	f040 8097 	bne.w	8003d48 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d823      	bhi.n	8003c6a <UART_SetConfig+0x35a>
 8003c22:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <UART_SetConfig+0x318>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003c4d 	.word	0x08003c4d
 8003c2c:	08003c6b 	.word	0x08003c6b
 8003c30:	08003c55 	.word	0x08003c55
 8003c34:	08003c6b 	.word	0x08003c6b
 8003c38:	08003c5b 	.word	0x08003c5b
 8003c3c:	08003c6b 	.word	0x08003c6b
 8003c40:	08003c6b 	.word	0x08003c6b
 8003c44:	08003c6b 	.word	0x08003c6b
 8003c48:	08003c63 	.word	0x08003c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c4c:	f7fe ff18 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8003c50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c52:	e010      	b.n	8003c76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c54:	4b9e      	ldr	r3, [pc, #632]	; (8003ed0 <UART_SetConfig+0x5c0>)
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c58:	e00d      	b.n	8003c76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c5a:	f7fe fea3 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8003c5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c60:	e009      	b.n	8003c76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c68:	e005      	b.n	8003c76 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8130 	beq.w	8003ede <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	4a94      	ldr	r2, [pc, #592]	; (8003ed4 <UART_SetConfig+0x5c4>)
 8003c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4413      	add	r3, r2
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d305      	bcc.n	8003cae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d903      	bls.n	8003cb6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003cb4:	e113      	b.n	8003ede <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	2200      	movs	r2, #0
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	60fa      	str	r2, [r7, #12]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	4a84      	ldr	r2, [pc, #528]	; (8003ed4 <UART_SetConfig+0x5c4>)
 8003cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2200      	movs	r2, #0
 8003ccc:	603b      	str	r3, [r7, #0]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cd8:	f7fc faf2 	bl	80002c0 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	020b      	lsls	r3, r1, #8
 8003cee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003cf2:	0202      	lsls	r2, r0, #8
 8003cf4:	6979      	ldr	r1, [r7, #20]
 8003cf6:	6849      	ldr	r1, [r1, #4]
 8003cf8:	0849      	lsrs	r1, r1, #1
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	4605      	mov	r5, r0
 8003d00:	eb12 0804 	adds.w	r8, r2, r4
 8003d04:	eb43 0905 	adc.w	r9, r3, r5
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	469a      	mov	sl, r3
 8003d10:	4693      	mov	fp, r2
 8003d12:	4652      	mov	r2, sl
 8003d14:	465b      	mov	r3, fp
 8003d16:	4640      	mov	r0, r8
 8003d18:	4649      	mov	r1, r9
 8003d1a:	f7fc fad1 	bl	80002c0 <__aeabi_uldivmod>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4613      	mov	r3, r2
 8003d24:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d2c:	d308      	bcc.n	8003d40 <UART_SetConfig+0x430>
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d34:	d204      	bcs.n	8003d40 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6a3a      	ldr	r2, [r7, #32]
 8003d3c:	60da      	str	r2, [r3, #12]
 8003d3e:	e0ce      	b.n	8003ede <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d46:	e0ca      	b.n	8003ede <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d50:	d166      	bne.n	8003e20 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003d52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d827      	bhi.n	8003daa <UART_SetConfig+0x49a>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <UART_SetConfig+0x450>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003d85 	.word	0x08003d85
 8003d64:	08003d8d 	.word	0x08003d8d
 8003d68:	08003d95 	.word	0x08003d95
 8003d6c:	08003dab 	.word	0x08003dab
 8003d70:	08003d9b 	.word	0x08003d9b
 8003d74:	08003dab 	.word	0x08003dab
 8003d78:	08003dab 	.word	0x08003dab
 8003d7c:	08003dab 	.word	0x08003dab
 8003d80:	08003da3 	.word	0x08003da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d84:	f7fe fe7c 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8003d88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d8a:	e014      	b.n	8003db6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d8c:	f7fe fe8e 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003d90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d92:	e010      	b.n	8003db6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d94:	4b4e      	ldr	r3, [pc, #312]	; (8003ed0 <UART_SetConfig+0x5c0>)
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d98:	e00d      	b.n	8003db6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9a:	f7fe fe03 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8003d9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003da0:	e009      	b.n	8003db6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003da8:	e005      	b.n	8003db6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003db4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8090 	beq.w	8003ede <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	4a44      	ldr	r2, [pc, #272]	; (8003ed4 <UART_SetConfig+0x5c4>)
 8003dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dd0:	005a      	lsls	r2, r3, #1
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	441a      	add	r2, r3
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	2b0f      	cmp	r3, #15
 8003de8:	d916      	bls.n	8003e18 <UART_SetConfig+0x508>
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df0:	d212      	bcs.n	8003e18 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f023 030f 	bic.w	r3, r3, #15
 8003dfa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	085b      	lsrs	r3, r3, #1
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	8bfb      	ldrh	r3, [r7, #30]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	8bfa      	ldrh	r2, [r7, #30]
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	e062      	b.n	8003ede <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e1e:	e05e      	b.n	8003ede <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d828      	bhi.n	8003e7a <UART_SetConfig+0x56a>
 8003e28:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <UART_SetConfig+0x520>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e55 	.word	0x08003e55
 8003e34:	08003e5d 	.word	0x08003e5d
 8003e38:	08003e65 	.word	0x08003e65
 8003e3c:	08003e7b 	.word	0x08003e7b
 8003e40:	08003e6b 	.word	0x08003e6b
 8003e44:	08003e7b 	.word	0x08003e7b
 8003e48:	08003e7b 	.word	0x08003e7b
 8003e4c:	08003e7b 	.word	0x08003e7b
 8003e50:	08003e73 	.word	0x08003e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e54:	f7fe fe14 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8003e58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e5a:	e014      	b.n	8003e86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e5c:	f7fe fe26 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003e60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e62:	e010      	b.n	8003e86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e64:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <UART_SetConfig+0x5c0>)
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e68:	e00d      	b.n	8003e86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6a:	f7fe fd9b 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8003e6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e70:	e009      	b.n	8003e86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e78:	e005      	b.n	8003e86 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e84:	bf00      	nop
    }

    if (pclk != 0U)
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d028      	beq.n	8003ede <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	4a10      	ldr	r2, [pc, #64]	; (8003ed4 <UART_SetConfig+0x5c4>)
 8003e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e96:	461a      	mov	r2, r3
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	441a      	add	r2, r3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	2b0f      	cmp	r3, #15
 8003eb4:	d910      	bls.n	8003ed8 <UART_SetConfig+0x5c8>
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebc:	d20c      	bcs.n	8003ed8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60da      	str	r2, [r3, #12]
 8003ec8:	e009      	b.n	8003ede <UART_SetConfig+0x5ce>
 8003eca:	bf00      	nop
 8003ecc:	40008000 	.word	0x40008000
 8003ed0:	00f42400 	.word	0x00f42400
 8003ed4:	08004e0c 	.word	0x08004e0c
      }
      else
      {
        ret = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003efa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3730      	adds	r7, #48	; 0x30
 8003f02:	46bd      	mov	sp, r7
 8003f04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d01a      	beq.n	800401e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004006:	d10a      	bne.n	800401e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	605a      	str	r2, [r3, #4]
  }
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af02      	add	r7, sp, #8
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800405c:	f7fc ffae 	bl	8000fbc <HAL_GetTick>
 8004060:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b08      	cmp	r3, #8
 800406e:	d10e      	bne.n	800408e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004070:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f82f 	bl	80040e2 <UART_WaitOnFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e025      	b.n	80040da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b04      	cmp	r3, #4
 800409a:	d10e      	bne.n	80040ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800409c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f819 	bl	80040e2 <UART_WaitOnFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e00f      	b.n	80040da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b09c      	sub	sp, #112	; 0x70
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	603b      	str	r3, [r7, #0]
 80040ee:	4613      	mov	r3, r2
 80040f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f2:	e0a9      	b.n	8004248 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fa:	f000 80a5 	beq.w	8004248 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fe:	f7fc ff5d 	bl	8000fbc <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800410a:	429a      	cmp	r2, r3
 800410c:	d302      	bcc.n	8004114 <UART_WaitOnFlagUntilTimeout+0x32>
 800410e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004110:	2b00      	cmp	r3, #0
 8004112:	d140      	bne.n	8004196 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004124:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004128:	667b      	str	r3, [r7, #100]	; 0x64
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004132:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004134:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004138:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e6      	bne.n	8004114 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3308      	adds	r3, #8
 800414c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	663b      	str	r3, [r7, #96]	; 0x60
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3308      	adds	r3, #8
 8004164:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004166:	64ba      	str	r2, [r7, #72]	; 0x48
 8004168:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800416c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e5      	bne.n	8004146 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2220      	movs	r2, #32
 8004186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e069      	b.n	800426a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d051      	beq.n	8004248 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b2:	d149      	bne.n	8004248 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041dc:	637b      	str	r3, [r7, #52]	; 0x34
 80041de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e6      	bne.n	80041be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3308      	adds	r3, #8
 80041f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	e853 3f00 	ldrex	r3, [r3]
 80041fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f023 0301 	bic.w	r3, r3, #1
 8004206:	66bb      	str	r3, [r7, #104]	; 0x68
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3308      	adds	r3, #8
 800420e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004210:	623a      	str	r2, [r7, #32]
 8004212:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	69f9      	ldr	r1, [r7, #28]
 8004216:	6a3a      	ldr	r2, [r7, #32]
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	61bb      	str	r3, [r7, #24]
   return(result);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e5      	bne.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2220      	movs	r2, #32
 8004238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e010      	b.n	800426a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69da      	ldr	r2, [r3, #28]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4013      	ands	r3, r2
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	429a      	cmp	r2, r3
 8004256:	bf0c      	ite	eq
 8004258:	2301      	moveq	r3, #1
 800425a:	2300      	movne	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	461a      	mov	r2, r3
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	429a      	cmp	r2, r3
 8004264:	f43f af46 	beq.w	80040f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3770      	adds	r7, #112	; 0x70
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_UARTEx_DisableFifoMode+0x16>
 8004284:	2302      	movs	r3, #2
 8004286:	e027      	b.n	80042d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2224      	movs	r2, #36	; 0x24
 8004294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80042b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e02d      	b.n	8004358 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2224      	movs	r2, #36	; 0x24
 8004308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f84f 	bl	80043dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004374:	2302      	movs	r3, #2
 8004376:	e02d      	b.n	80043d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2224      	movs	r2, #36	; 0x24
 8004384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0201 	bic.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f811 	bl	80043dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d108      	bne.n	80043fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80043fc:	e031      	b.n	8004462 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80043fe:	2308      	movs	r3, #8
 8004400:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004402:	2308      	movs	r3, #8
 8004404:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	0e5b      	lsrs	r3, r3, #25
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	0f5b      	lsrs	r3, r3, #29
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004426:	7bbb      	ldrb	r3, [r7, #14]
 8004428:	7b3a      	ldrb	r2, [r7, #12]
 800442a:	4911      	ldr	r1, [pc, #68]	; (8004470 <UARTEx_SetNbDataToProcess+0x94>)
 800442c:	5c8a      	ldrb	r2, [r1, r2]
 800442e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004432:	7b3a      	ldrb	r2, [r7, #12]
 8004434:	490f      	ldr	r1, [pc, #60]	; (8004474 <UARTEx_SetNbDataToProcess+0x98>)
 8004436:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004438:	fb93 f3f2 	sdiv	r3, r3, r2
 800443c:	b29a      	uxth	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	7b7a      	ldrb	r2, [r7, #13]
 8004448:	4909      	ldr	r1, [pc, #36]	; (8004470 <UARTEx_SetNbDataToProcess+0x94>)
 800444a:	5c8a      	ldrb	r2, [r1, r2]
 800444c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004450:	7b7a      	ldrb	r2, [r7, #13]
 8004452:	4908      	ldr	r1, [pc, #32]	; (8004474 <UARTEx_SetNbDataToProcess+0x98>)
 8004454:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004456:	fb93 f3f2 	sdiv	r3, r3, r2
 800445a:	b29a      	uxth	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	08004e24 	.word	0x08004e24
 8004474:	08004e2c 	.word	0x08004e2c

08004478 <__errno>:
 8004478:	4b01      	ldr	r3, [pc, #4]	; (8004480 <__errno+0x8>)
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	2000000c 	.word	0x2000000c

08004484 <__libc_init_array>:
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	4d0d      	ldr	r5, [pc, #52]	; (80044bc <__libc_init_array+0x38>)
 8004488:	4c0d      	ldr	r4, [pc, #52]	; (80044c0 <__libc_init_array+0x3c>)
 800448a:	1b64      	subs	r4, r4, r5
 800448c:	10a4      	asrs	r4, r4, #2
 800448e:	2600      	movs	r6, #0
 8004490:	42a6      	cmp	r6, r4
 8004492:	d109      	bne.n	80044a8 <__libc_init_array+0x24>
 8004494:	4d0b      	ldr	r5, [pc, #44]	; (80044c4 <__libc_init_array+0x40>)
 8004496:	4c0c      	ldr	r4, [pc, #48]	; (80044c8 <__libc_init_array+0x44>)
 8004498:	f000 fc8e 	bl	8004db8 <_init>
 800449c:	1b64      	subs	r4, r4, r5
 800449e:	10a4      	asrs	r4, r4, #2
 80044a0:	2600      	movs	r6, #0
 80044a2:	42a6      	cmp	r6, r4
 80044a4:	d105      	bne.n	80044b2 <__libc_init_array+0x2e>
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
 80044a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ac:	4798      	blx	r3
 80044ae:	3601      	adds	r6, #1
 80044b0:	e7ee      	b.n	8004490 <__libc_init_array+0xc>
 80044b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b6:	4798      	blx	r3
 80044b8:	3601      	adds	r6, #1
 80044ba:	e7f2      	b.n	80044a2 <__libc_init_array+0x1e>
 80044bc:	08004e70 	.word	0x08004e70
 80044c0:	08004e70 	.word	0x08004e70
 80044c4:	08004e70 	.word	0x08004e70
 80044c8:	08004e74 	.word	0x08004e74

080044cc <memset>:
 80044cc:	4402      	add	r2, r0
 80044ce:	4603      	mov	r3, r0
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d100      	bne.n	80044d6 <memset+0xa>
 80044d4:	4770      	bx	lr
 80044d6:	f803 1b01 	strb.w	r1, [r3], #1
 80044da:	e7f9      	b.n	80044d0 <memset+0x4>

080044dc <siprintf>:
 80044dc:	b40e      	push	{r1, r2, r3}
 80044de:	b500      	push	{lr}
 80044e0:	b09c      	sub	sp, #112	; 0x70
 80044e2:	ab1d      	add	r3, sp, #116	; 0x74
 80044e4:	9002      	str	r0, [sp, #8]
 80044e6:	9006      	str	r0, [sp, #24]
 80044e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044ec:	4809      	ldr	r0, [pc, #36]	; (8004514 <siprintf+0x38>)
 80044ee:	9107      	str	r1, [sp, #28]
 80044f0:	9104      	str	r1, [sp, #16]
 80044f2:	4909      	ldr	r1, [pc, #36]	; (8004518 <siprintf+0x3c>)
 80044f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80044f8:	9105      	str	r1, [sp, #20]
 80044fa:	6800      	ldr	r0, [r0, #0]
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	a902      	add	r1, sp, #8
 8004500:	f000 f868 	bl	80045d4 <_svfiprintf_r>
 8004504:	9b02      	ldr	r3, [sp, #8]
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	b01c      	add	sp, #112	; 0x70
 800450c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004510:	b003      	add	sp, #12
 8004512:	4770      	bx	lr
 8004514:	2000000c 	.word	0x2000000c
 8004518:	ffff0208 	.word	0xffff0208

0800451c <__ssputs_r>:
 800451c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004520:	688e      	ldr	r6, [r1, #8]
 8004522:	429e      	cmp	r6, r3
 8004524:	4682      	mov	sl, r0
 8004526:	460c      	mov	r4, r1
 8004528:	4690      	mov	r8, r2
 800452a:	461f      	mov	r7, r3
 800452c:	d838      	bhi.n	80045a0 <__ssputs_r+0x84>
 800452e:	898a      	ldrh	r2, [r1, #12]
 8004530:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004534:	d032      	beq.n	800459c <__ssputs_r+0x80>
 8004536:	6825      	ldr	r5, [r4, #0]
 8004538:	6909      	ldr	r1, [r1, #16]
 800453a:	eba5 0901 	sub.w	r9, r5, r1
 800453e:	6965      	ldr	r5, [r4, #20]
 8004540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004544:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004548:	3301      	adds	r3, #1
 800454a:	444b      	add	r3, r9
 800454c:	106d      	asrs	r5, r5, #1
 800454e:	429d      	cmp	r5, r3
 8004550:	bf38      	it	cc
 8004552:	461d      	movcc	r5, r3
 8004554:	0553      	lsls	r3, r2, #21
 8004556:	d531      	bpl.n	80045bc <__ssputs_r+0xa0>
 8004558:	4629      	mov	r1, r5
 800455a:	f000 fb63 	bl	8004c24 <_malloc_r>
 800455e:	4606      	mov	r6, r0
 8004560:	b950      	cbnz	r0, 8004578 <__ssputs_r+0x5c>
 8004562:	230c      	movs	r3, #12
 8004564:	f8ca 3000 	str.w	r3, [sl]
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800456e:	81a3      	strh	r3, [r4, #12]
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004578:	6921      	ldr	r1, [r4, #16]
 800457a:	464a      	mov	r2, r9
 800457c:	f000 fabe 	bl	8004afc <memcpy>
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458a:	81a3      	strh	r3, [r4, #12]
 800458c:	6126      	str	r6, [r4, #16]
 800458e:	6165      	str	r5, [r4, #20]
 8004590:	444e      	add	r6, r9
 8004592:	eba5 0509 	sub.w	r5, r5, r9
 8004596:	6026      	str	r6, [r4, #0]
 8004598:	60a5      	str	r5, [r4, #8]
 800459a:	463e      	mov	r6, r7
 800459c:	42be      	cmp	r6, r7
 800459e:	d900      	bls.n	80045a2 <__ssputs_r+0x86>
 80045a0:	463e      	mov	r6, r7
 80045a2:	6820      	ldr	r0, [r4, #0]
 80045a4:	4632      	mov	r2, r6
 80045a6:	4641      	mov	r1, r8
 80045a8:	f000 fab6 	bl	8004b18 <memmove>
 80045ac:	68a3      	ldr	r3, [r4, #8]
 80045ae:	1b9b      	subs	r3, r3, r6
 80045b0:	60a3      	str	r3, [r4, #8]
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	4433      	add	r3, r6
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	2000      	movs	r0, #0
 80045ba:	e7db      	b.n	8004574 <__ssputs_r+0x58>
 80045bc:	462a      	mov	r2, r5
 80045be:	f000 fba5 	bl	8004d0c <_realloc_r>
 80045c2:	4606      	mov	r6, r0
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d1e1      	bne.n	800458c <__ssputs_r+0x70>
 80045c8:	6921      	ldr	r1, [r4, #16]
 80045ca:	4650      	mov	r0, sl
 80045cc:	f000 fabe 	bl	8004b4c <_free_r>
 80045d0:	e7c7      	b.n	8004562 <__ssputs_r+0x46>
	...

080045d4 <_svfiprintf_r>:
 80045d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d8:	4698      	mov	r8, r3
 80045da:	898b      	ldrh	r3, [r1, #12]
 80045dc:	061b      	lsls	r3, r3, #24
 80045de:	b09d      	sub	sp, #116	; 0x74
 80045e0:	4607      	mov	r7, r0
 80045e2:	460d      	mov	r5, r1
 80045e4:	4614      	mov	r4, r2
 80045e6:	d50e      	bpl.n	8004606 <_svfiprintf_r+0x32>
 80045e8:	690b      	ldr	r3, [r1, #16]
 80045ea:	b963      	cbnz	r3, 8004606 <_svfiprintf_r+0x32>
 80045ec:	2140      	movs	r1, #64	; 0x40
 80045ee:	f000 fb19 	bl	8004c24 <_malloc_r>
 80045f2:	6028      	str	r0, [r5, #0]
 80045f4:	6128      	str	r0, [r5, #16]
 80045f6:	b920      	cbnz	r0, 8004602 <_svfiprintf_r+0x2e>
 80045f8:	230c      	movs	r3, #12
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004600:	e0d1      	b.n	80047a6 <_svfiprintf_r+0x1d2>
 8004602:	2340      	movs	r3, #64	; 0x40
 8004604:	616b      	str	r3, [r5, #20]
 8004606:	2300      	movs	r3, #0
 8004608:	9309      	str	r3, [sp, #36]	; 0x24
 800460a:	2320      	movs	r3, #32
 800460c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004610:	f8cd 800c 	str.w	r8, [sp, #12]
 8004614:	2330      	movs	r3, #48	; 0x30
 8004616:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80047c0 <_svfiprintf_r+0x1ec>
 800461a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800461e:	f04f 0901 	mov.w	r9, #1
 8004622:	4623      	mov	r3, r4
 8004624:	469a      	mov	sl, r3
 8004626:	f813 2b01 	ldrb.w	r2, [r3], #1
 800462a:	b10a      	cbz	r2, 8004630 <_svfiprintf_r+0x5c>
 800462c:	2a25      	cmp	r2, #37	; 0x25
 800462e:	d1f9      	bne.n	8004624 <_svfiprintf_r+0x50>
 8004630:	ebba 0b04 	subs.w	fp, sl, r4
 8004634:	d00b      	beq.n	800464e <_svfiprintf_r+0x7a>
 8004636:	465b      	mov	r3, fp
 8004638:	4622      	mov	r2, r4
 800463a:	4629      	mov	r1, r5
 800463c:	4638      	mov	r0, r7
 800463e:	f7ff ff6d 	bl	800451c <__ssputs_r>
 8004642:	3001      	adds	r0, #1
 8004644:	f000 80aa 	beq.w	800479c <_svfiprintf_r+0x1c8>
 8004648:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800464a:	445a      	add	r2, fp
 800464c:	9209      	str	r2, [sp, #36]	; 0x24
 800464e:	f89a 3000 	ldrb.w	r3, [sl]
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 80a2 	beq.w	800479c <_svfiprintf_r+0x1c8>
 8004658:	2300      	movs	r3, #0
 800465a:	f04f 32ff 	mov.w	r2, #4294967295
 800465e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004662:	f10a 0a01 	add.w	sl, sl, #1
 8004666:	9304      	str	r3, [sp, #16]
 8004668:	9307      	str	r3, [sp, #28]
 800466a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800466e:	931a      	str	r3, [sp, #104]	; 0x68
 8004670:	4654      	mov	r4, sl
 8004672:	2205      	movs	r2, #5
 8004674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004678:	4851      	ldr	r0, [pc, #324]	; (80047c0 <_svfiprintf_r+0x1ec>)
 800467a:	f7fb fdd1 	bl	8000220 <memchr>
 800467e:	9a04      	ldr	r2, [sp, #16]
 8004680:	b9d8      	cbnz	r0, 80046ba <_svfiprintf_r+0xe6>
 8004682:	06d0      	lsls	r0, r2, #27
 8004684:	bf44      	itt	mi
 8004686:	2320      	movmi	r3, #32
 8004688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800468c:	0711      	lsls	r1, r2, #28
 800468e:	bf44      	itt	mi
 8004690:	232b      	movmi	r3, #43	; 0x2b
 8004692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004696:	f89a 3000 	ldrb.w	r3, [sl]
 800469a:	2b2a      	cmp	r3, #42	; 0x2a
 800469c:	d015      	beq.n	80046ca <_svfiprintf_r+0xf6>
 800469e:	9a07      	ldr	r2, [sp, #28]
 80046a0:	4654      	mov	r4, sl
 80046a2:	2000      	movs	r0, #0
 80046a4:	f04f 0c0a 	mov.w	ip, #10
 80046a8:	4621      	mov	r1, r4
 80046aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046ae:	3b30      	subs	r3, #48	; 0x30
 80046b0:	2b09      	cmp	r3, #9
 80046b2:	d94e      	bls.n	8004752 <_svfiprintf_r+0x17e>
 80046b4:	b1b0      	cbz	r0, 80046e4 <_svfiprintf_r+0x110>
 80046b6:	9207      	str	r2, [sp, #28]
 80046b8:	e014      	b.n	80046e4 <_svfiprintf_r+0x110>
 80046ba:	eba0 0308 	sub.w	r3, r0, r8
 80046be:	fa09 f303 	lsl.w	r3, r9, r3
 80046c2:	4313      	orrs	r3, r2
 80046c4:	9304      	str	r3, [sp, #16]
 80046c6:	46a2      	mov	sl, r4
 80046c8:	e7d2      	b.n	8004670 <_svfiprintf_r+0x9c>
 80046ca:	9b03      	ldr	r3, [sp, #12]
 80046cc:	1d19      	adds	r1, r3, #4
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	9103      	str	r1, [sp, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bfbb      	ittet	lt
 80046d6:	425b      	neglt	r3, r3
 80046d8:	f042 0202 	orrlt.w	r2, r2, #2
 80046dc:	9307      	strge	r3, [sp, #28]
 80046de:	9307      	strlt	r3, [sp, #28]
 80046e0:	bfb8      	it	lt
 80046e2:	9204      	strlt	r2, [sp, #16]
 80046e4:	7823      	ldrb	r3, [r4, #0]
 80046e6:	2b2e      	cmp	r3, #46	; 0x2e
 80046e8:	d10c      	bne.n	8004704 <_svfiprintf_r+0x130>
 80046ea:	7863      	ldrb	r3, [r4, #1]
 80046ec:	2b2a      	cmp	r3, #42	; 0x2a
 80046ee:	d135      	bne.n	800475c <_svfiprintf_r+0x188>
 80046f0:	9b03      	ldr	r3, [sp, #12]
 80046f2:	1d1a      	adds	r2, r3, #4
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	9203      	str	r2, [sp, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bfb8      	it	lt
 80046fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004700:	3402      	adds	r4, #2
 8004702:	9305      	str	r3, [sp, #20]
 8004704:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047d0 <_svfiprintf_r+0x1fc>
 8004708:	7821      	ldrb	r1, [r4, #0]
 800470a:	2203      	movs	r2, #3
 800470c:	4650      	mov	r0, sl
 800470e:	f7fb fd87 	bl	8000220 <memchr>
 8004712:	b140      	cbz	r0, 8004726 <_svfiprintf_r+0x152>
 8004714:	2340      	movs	r3, #64	; 0x40
 8004716:	eba0 000a 	sub.w	r0, r0, sl
 800471a:	fa03 f000 	lsl.w	r0, r3, r0
 800471e:	9b04      	ldr	r3, [sp, #16]
 8004720:	4303      	orrs	r3, r0
 8004722:	3401      	adds	r4, #1
 8004724:	9304      	str	r3, [sp, #16]
 8004726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800472a:	4826      	ldr	r0, [pc, #152]	; (80047c4 <_svfiprintf_r+0x1f0>)
 800472c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004730:	2206      	movs	r2, #6
 8004732:	f7fb fd75 	bl	8000220 <memchr>
 8004736:	2800      	cmp	r0, #0
 8004738:	d038      	beq.n	80047ac <_svfiprintf_r+0x1d8>
 800473a:	4b23      	ldr	r3, [pc, #140]	; (80047c8 <_svfiprintf_r+0x1f4>)
 800473c:	bb1b      	cbnz	r3, 8004786 <_svfiprintf_r+0x1b2>
 800473e:	9b03      	ldr	r3, [sp, #12]
 8004740:	3307      	adds	r3, #7
 8004742:	f023 0307 	bic.w	r3, r3, #7
 8004746:	3308      	adds	r3, #8
 8004748:	9303      	str	r3, [sp, #12]
 800474a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800474c:	4433      	add	r3, r6
 800474e:	9309      	str	r3, [sp, #36]	; 0x24
 8004750:	e767      	b.n	8004622 <_svfiprintf_r+0x4e>
 8004752:	fb0c 3202 	mla	r2, ip, r2, r3
 8004756:	460c      	mov	r4, r1
 8004758:	2001      	movs	r0, #1
 800475a:	e7a5      	b.n	80046a8 <_svfiprintf_r+0xd4>
 800475c:	2300      	movs	r3, #0
 800475e:	3401      	adds	r4, #1
 8004760:	9305      	str	r3, [sp, #20]
 8004762:	4619      	mov	r1, r3
 8004764:	f04f 0c0a 	mov.w	ip, #10
 8004768:	4620      	mov	r0, r4
 800476a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800476e:	3a30      	subs	r2, #48	; 0x30
 8004770:	2a09      	cmp	r2, #9
 8004772:	d903      	bls.n	800477c <_svfiprintf_r+0x1a8>
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0c5      	beq.n	8004704 <_svfiprintf_r+0x130>
 8004778:	9105      	str	r1, [sp, #20]
 800477a:	e7c3      	b.n	8004704 <_svfiprintf_r+0x130>
 800477c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004780:	4604      	mov	r4, r0
 8004782:	2301      	movs	r3, #1
 8004784:	e7f0      	b.n	8004768 <_svfiprintf_r+0x194>
 8004786:	ab03      	add	r3, sp, #12
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	462a      	mov	r2, r5
 800478c:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <_svfiprintf_r+0x1f8>)
 800478e:	a904      	add	r1, sp, #16
 8004790:	4638      	mov	r0, r7
 8004792:	f3af 8000 	nop.w
 8004796:	1c42      	adds	r2, r0, #1
 8004798:	4606      	mov	r6, r0
 800479a:	d1d6      	bne.n	800474a <_svfiprintf_r+0x176>
 800479c:	89ab      	ldrh	r3, [r5, #12]
 800479e:	065b      	lsls	r3, r3, #25
 80047a0:	f53f af2c 	bmi.w	80045fc <_svfiprintf_r+0x28>
 80047a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047a6:	b01d      	add	sp, #116	; 0x74
 80047a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ac:	ab03      	add	r3, sp, #12
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	462a      	mov	r2, r5
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <_svfiprintf_r+0x1f8>)
 80047b4:	a904      	add	r1, sp, #16
 80047b6:	4638      	mov	r0, r7
 80047b8:	f000 f87a 	bl	80048b0 <_printf_i>
 80047bc:	e7eb      	b.n	8004796 <_svfiprintf_r+0x1c2>
 80047be:	bf00      	nop
 80047c0:	08004e34 	.word	0x08004e34
 80047c4:	08004e3e 	.word	0x08004e3e
 80047c8:	00000000 	.word	0x00000000
 80047cc:	0800451d 	.word	0x0800451d
 80047d0:	08004e3a 	.word	0x08004e3a

080047d4 <_printf_common>:
 80047d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d8:	4616      	mov	r6, r2
 80047da:	4699      	mov	r9, r3
 80047dc:	688a      	ldr	r2, [r1, #8]
 80047de:	690b      	ldr	r3, [r1, #16]
 80047e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047e4:	4293      	cmp	r3, r2
 80047e6:	bfb8      	it	lt
 80047e8:	4613      	movlt	r3, r2
 80047ea:	6033      	str	r3, [r6, #0]
 80047ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047f0:	4607      	mov	r7, r0
 80047f2:	460c      	mov	r4, r1
 80047f4:	b10a      	cbz	r2, 80047fa <_printf_common+0x26>
 80047f6:	3301      	adds	r3, #1
 80047f8:	6033      	str	r3, [r6, #0]
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	0699      	lsls	r1, r3, #26
 80047fe:	bf42      	ittt	mi
 8004800:	6833      	ldrmi	r3, [r6, #0]
 8004802:	3302      	addmi	r3, #2
 8004804:	6033      	strmi	r3, [r6, #0]
 8004806:	6825      	ldr	r5, [r4, #0]
 8004808:	f015 0506 	ands.w	r5, r5, #6
 800480c:	d106      	bne.n	800481c <_printf_common+0x48>
 800480e:	f104 0a19 	add.w	sl, r4, #25
 8004812:	68e3      	ldr	r3, [r4, #12]
 8004814:	6832      	ldr	r2, [r6, #0]
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	42ab      	cmp	r3, r5
 800481a:	dc26      	bgt.n	800486a <_printf_common+0x96>
 800481c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004820:	1e13      	subs	r3, r2, #0
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	bf18      	it	ne
 8004826:	2301      	movne	r3, #1
 8004828:	0692      	lsls	r2, r2, #26
 800482a:	d42b      	bmi.n	8004884 <_printf_common+0xb0>
 800482c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004830:	4649      	mov	r1, r9
 8004832:	4638      	mov	r0, r7
 8004834:	47c0      	blx	r8
 8004836:	3001      	adds	r0, #1
 8004838:	d01e      	beq.n	8004878 <_printf_common+0xa4>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	68e5      	ldr	r5, [r4, #12]
 800483e:	6832      	ldr	r2, [r6, #0]
 8004840:	f003 0306 	and.w	r3, r3, #6
 8004844:	2b04      	cmp	r3, #4
 8004846:	bf08      	it	eq
 8004848:	1aad      	subeq	r5, r5, r2
 800484a:	68a3      	ldr	r3, [r4, #8]
 800484c:	6922      	ldr	r2, [r4, #16]
 800484e:	bf0c      	ite	eq
 8004850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004854:	2500      	movne	r5, #0
 8004856:	4293      	cmp	r3, r2
 8004858:	bfc4      	itt	gt
 800485a:	1a9b      	subgt	r3, r3, r2
 800485c:	18ed      	addgt	r5, r5, r3
 800485e:	2600      	movs	r6, #0
 8004860:	341a      	adds	r4, #26
 8004862:	42b5      	cmp	r5, r6
 8004864:	d11a      	bne.n	800489c <_printf_common+0xc8>
 8004866:	2000      	movs	r0, #0
 8004868:	e008      	b.n	800487c <_printf_common+0xa8>
 800486a:	2301      	movs	r3, #1
 800486c:	4652      	mov	r2, sl
 800486e:	4649      	mov	r1, r9
 8004870:	4638      	mov	r0, r7
 8004872:	47c0      	blx	r8
 8004874:	3001      	adds	r0, #1
 8004876:	d103      	bne.n	8004880 <_printf_common+0xac>
 8004878:	f04f 30ff 	mov.w	r0, #4294967295
 800487c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004880:	3501      	adds	r5, #1
 8004882:	e7c6      	b.n	8004812 <_printf_common+0x3e>
 8004884:	18e1      	adds	r1, r4, r3
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	2030      	movs	r0, #48	; 0x30
 800488a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800488e:	4422      	add	r2, r4
 8004890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004898:	3302      	adds	r3, #2
 800489a:	e7c7      	b.n	800482c <_printf_common+0x58>
 800489c:	2301      	movs	r3, #1
 800489e:	4622      	mov	r2, r4
 80048a0:	4649      	mov	r1, r9
 80048a2:	4638      	mov	r0, r7
 80048a4:	47c0      	blx	r8
 80048a6:	3001      	adds	r0, #1
 80048a8:	d0e6      	beq.n	8004878 <_printf_common+0xa4>
 80048aa:	3601      	adds	r6, #1
 80048ac:	e7d9      	b.n	8004862 <_printf_common+0x8e>
	...

080048b0 <_printf_i>:
 80048b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048b4:	7e0f      	ldrb	r7, [r1, #24]
 80048b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048b8:	2f78      	cmp	r7, #120	; 0x78
 80048ba:	4691      	mov	r9, r2
 80048bc:	4680      	mov	r8, r0
 80048be:	460c      	mov	r4, r1
 80048c0:	469a      	mov	sl, r3
 80048c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048c6:	d807      	bhi.n	80048d8 <_printf_i+0x28>
 80048c8:	2f62      	cmp	r7, #98	; 0x62
 80048ca:	d80a      	bhi.n	80048e2 <_printf_i+0x32>
 80048cc:	2f00      	cmp	r7, #0
 80048ce:	f000 80d8 	beq.w	8004a82 <_printf_i+0x1d2>
 80048d2:	2f58      	cmp	r7, #88	; 0x58
 80048d4:	f000 80a3 	beq.w	8004a1e <_printf_i+0x16e>
 80048d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048e0:	e03a      	b.n	8004958 <_printf_i+0xa8>
 80048e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048e6:	2b15      	cmp	r3, #21
 80048e8:	d8f6      	bhi.n	80048d8 <_printf_i+0x28>
 80048ea:	a101      	add	r1, pc, #4	; (adr r1, 80048f0 <_printf_i+0x40>)
 80048ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048f0:	08004949 	.word	0x08004949
 80048f4:	0800495d 	.word	0x0800495d
 80048f8:	080048d9 	.word	0x080048d9
 80048fc:	080048d9 	.word	0x080048d9
 8004900:	080048d9 	.word	0x080048d9
 8004904:	080048d9 	.word	0x080048d9
 8004908:	0800495d 	.word	0x0800495d
 800490c:	080048d9 	.word	0x080048d9
 8004910:	080048d9 	.word	0x080048d9
 8004914:	080048d9 	.word	0x080048d9
 8004918:	080048d9 	.word	0x080048d9
 800491c:	08004a69 	.word	0x08004a69
 8004920:	0800498d 	.word	0x0800498d
 8004924:	08004a4b 	.word	0x08004a4b
 8004928:	080048d9 	.word	0x080048d9
 800492c:	080048d9 	.word	0x080048d9
 8004930:	08004a8b 	.word	0x08004a8b
 8004934:	080048d9 	.word	0x080048d9
 8004938:	0800498d 	.word	0x0800498d
 800493c:	080048d9 	.word	0x080048d9
 8004940:	080048d9 	.word	0x080048d9
 8004944:	08004a53 	.word	0x08004a53
 8004948:	682b      	ldr	r3, [r5, #0]
 800494a:	1d1a      	adds	r2, r3, #4
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	602a      	str	r2, [r5, #0]
 8004950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004958:	2301      	movs	r3, #1
 800495a:	e0a3      	b.n	8004aa4 <_printf_i+0x1f4>
 800495c:	6820      	ldr	r0, [r4, #0]
 800495e:	6829      	ldr	r1, [r5, #0]
 8004960:	0606      	lsls	r6, r0, #24
 8004962:	f101 0304 	add.w	r3, r1, #4
 8004966:	d50a      	bpl.n	800497e <_printf_i+0xce>
 8004968:	680e      	ldr	r6, [r1, #0]
 800496a:	602b      	str	r3, [r5, #0]
 800496c:	2e00      	cmp	r6, #0
 800496e:	da03      	bge.n	8004978 <_printf_i+0xc8>
 8004970:	232d      	movs	r3, #45	; 0x2d
 8004972:	4276      	negs	r6, r6
 8004974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004978:	485e      	ldr	r0, [pc, #376]	; (8004af4 <_printf_i+0x244>)
 800497a:	230a      	movs	r3, #10
 800497c:	e019      	b.n	80049b2 <_printf_i+0x102>
 800497e:	680e      	ldr	r6, [r1, #0]
 8004980:	602b      	str	r3, [r5, #0]
 8004982:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004986:	bf18      	it	ne
 8004988:	b236      	sxthne	r6, r6
 800498a:	e7ef      	b.n	800496c <_printf_i+0xbc>
 800498c:	682b      	ldr	r3, [r5, #0]
 800498e:	6820      	ldr	r0, [r4, #0]
 8004990:	1d19      	adds	r1, r3, #4
 8004992:	6029      	str	r1, [r5, #0]
 8004994:	0601      	lsls	r1, r0, #24
 8004996:	d501      	bpl.n	800499c <_printf_i+0xec>
 8004998:	681e      	ldr	r6, [r3, #0]
 800499a:	e002      	b.n	80049a2 <_printf_i+0xf2>
 800499c:	0646      	lsls	r6, r0, #25
 800499e:	d5fb      	bpl.n	8004998 <_printf_i+0xe8>
 80049a0:	881e      	ldrh	r6, [r3, #0]
 80049a2:	4854      	ldr	r0, [pc, #336]	; (8004af4 <_printf_i+0x244>)
 80049a4:	2f6f      	cmp	r7, #111	; 0x6f
 80049a6:	bf0c      	ite	eq
 80049a8:	2308      	moveq	r3, #8
 80049aa:	230a      	movne	r3, #10
 80049ac:	2100      	movs	r1, #0
 80049ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049b2:	6865      	ldr	r5, [r4, #4]
 80049b4:	60a5      	str	r5, [r4, #8]
 80049b6:	2d00      	cmp	r5, #0
 80049b8:	bfa2      	ittt	ge
 80049ba:	6821      	ldrge	r1, [r4, #0]
 80049bc:	f021 0104 	bicge.w	r1, r1, #4
 80049c0:	6021      	strge	r1, [r4, #0]
 80049c2:	b90e      	cbnz	r6, 80049c8 <_printf_i+0x118>
 80049c4:	2d00      	cmp	r5, #0
 80049c6:	d04d      	beq.n	8004a64 <_printf_i+0x1b4>
 80049c8:	4615      	mov	r5, r2
 80049ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80049ce:	fb03 6711 	mls	r7, r3, r1, r6
 80049d2:	5dc7      	ldrb	r7, [r0, r7]
 80049d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049d8:	4637      	mov	r7, r6
 80049da:	42bb      	cmp	r3, r7
 80049dc:	460e      	mov	r6, r1
 80049de:	d9f4      	bls.n	80049ca <_printf_i+0x11a>
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d10b      	bne.n	80049fc <_printf_i+0x14c>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	07de      	lsls	r6, r3, #31
 80049e8:	d508      	bpl.n	80049fc <_printf_i+0x14c>
 80049ea:	6923      	ldr	r3, [r4, #16]
 80049ec:	6861      	ldr	r1, [r4, #4]
 80049ee:	4299      	cmp	r1, r3
 80049f0:	bfde      	ittt	le
 80049f2:	2330      	movle	r3, #48	; 0x30
 80049f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049fc:	1b52      	subs	r2, r2, r5
 80049fe:	6122      	str	r2, [r4, #16]
 8004a00:	f8cd a000 	str.w	sl, [sp]
 8004a04:	464b      	mov	r3, r9
 8004a06:	aa03      	add	r2, sp, #12
 8004a08:	4621      	mov	r1, r4
 8004a0a:	4640      	mov	r0, r8
 8004a0c:	f7ff fee2 	bl	80047d4 <_printf_common>
 8004a10:	3001      	adds	r0, #1
 8004a12:	d14c      	bne.n	8004aae <_printf_i+0x1fe>
 8004a14:	f04f 30ff 	mov.w	r0, #4294967295
 8004a18:	b004      	add	sp, #16
 8004a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1e:	4835      	ldr	r0, [pc, #212]	; (8004af4 <_printf_i+0x244>)
 8004a20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a24:	6829      	ldr	r1, [r5, #0]
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a2c:	6029      	str	r1, [r5, #0]
 8004a2e:	061d      	lsls	r5, r3, #24
 8004a30:	d514      	bpl.n	8004a5c <_printf_i+0x1ac>
 8004a32:	07df      	lsls	r7, r3, #31
 8004a34:	bf44      	itt	mi
 8004a36:	f043 0320 	orrmi.w	r3, r3, #32
 8004a3a:	6023      	strmi	r3, [r4, #0]
 8004a3c:	b91e      	cbnz	r6, 8004a46 <_printf_i+0x196>
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	f023 0320 	bic.w	r3, r3, #32
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	2310      	movs	r3, #16
 8004a48:	e7b0      	b.n	80049ac <_printf_i+0xfc>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	f043 0320 	orr.w	r3, r3, #32
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	2378      	movs	r3, #120	; 0x78
 8004a54:	4828      	ldr	r0, [pc, #160]	; (8004af8 <_printf_i+0x248>)
 8004a56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a5a:	e7e3      	b.n	8004a24 <_printf_i+0x174>
 8004a5c:	0659      	lsls	r1, r3, #25
 8004a5e:	bf48      	it	mi
 8004a60:	b2b6      	uxthmi	r6, r6
 8004a62:	e7e6      	b.n	8004a32 <_printf_i+0x182>
 8004a64:	4615      	mov	r5, r2
 8004a66:	e7bb      	b.n	80049e0 <_printf_i+0x130>
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	6826      	ldr	r6, [r4, #0]
 8004a6c:	6961      	ldr	r1, [r4, #20]
 8004a6e:	1d18      	adds	r0, r3, #4
 8004a70:	6028      	str	r0, [r5, #0]
 8004a72:	0635      	lsls	r5, r6, #24
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	d501      	bpl.n	8004a7c <_printf_i+0x1cc>
 8004a78:	6019      	str	r1, [r3, #0]
 8004a7a:	e002      	b.n	8004a82 <_printf_i+0x1d2>
 8004a7c:	0670      	lsls	r0, r6, #25
 8004a7e:	d5fb      	bpl.n	8004a78 <_printf_i+0x1c8>
 8004a80:	8019      	strh	r1, [r3, #0]
 8004a82:	2300      	movs	r3, #0
 8004a84:	6123      	str	r3, [r4, #16]
 8004a86:	4615      	mov	r5, r2
 8004a88:	e7ba      	b.n	8004a00 <_printf_i+0x150>
 8004a8a:	682b      	ldr	r3, [r5, #0]
 8004a8c:	1d1a      	adds	r2, r3, #4
 8004a8e:	602a      	str	r2, [r5, #0]
 8004a90:	681d      	ldr	r5, [r3, #0]
 8004a92:	6862      	ldr	r2, [r4, #4]
 8004a94:	2100      	movs	r1, #0
 8004a96:	4628      	mov	r0, r5
 8004a98:	f7fb fbc2 	bl	8000220 <memchr>
 8004a9c:	b108      	cbz	r0, 8004aa2 <_printf_i+0x1f2>
 8004a9e:	1b40      	subs	r0, r0, r5
 8004aa0:	6060      	str	r0, [r4, #4]
 8004aa2:	6863      	ldr	r3, [r4, #4]
 8004aa4:	6123      	str	r3, [r4, #16]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aac:	e7a8      	b.n	8004a00 <_printf_i+0x150>
 8004aae:	6923      	ldr	r3, [r4, #16]
 8004ab0:	462a      	mov	r2, r5
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	4640      	mov	r0, r8
 8004ab6:	47d0      	blx	sl
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d0ab      	beq.n	8004a14 <_printf_i+0x164>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	079b      	lsls	r3, r3, #30
 8004ac0:	d413      	bmi.n	8004aea <_printf_i+0x23a>
 8004ac2:	68e0      	ldr	r0, [r4, #12]
 8004ac4:	9b03      	ldr	r3, [sp, #12]
 8004ac6:	4298      	cmp	r0, r3
 8004ac8:	bfb8      	it	lt
 8004aca:	4618      	movlt	r0, r3
 8004acc:	e7a4      	b.n	8004a18 <_printf_i+0x168>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	4632      	mov	r2, r6
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	4640      	mov	r0, r8
 8004ad6:	47d0      	blx	sl
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d09b      	beq.n	8004a14 <_printf_i+0x164>
 8004adc:	3501      	adds	r5, #1
 8004ade:	68e3      	ldr	r3, [r4, #12]
 8004ae0:	9903      	ldr	r1, [sp, #12]
 8004ae2:	1a5b      	subs	r3, r3, r1
 8004ae4:	42ab      	cmp	r3, r5
 8004ae6:	dcf2      	bgt.n	8004ace <_printf_i+0x21e>
 8004ae8:	e7eb      	b.n	8004ac2 <_printf_i+0x212>
 8004aea:	2500      	movs	r5, #0
 8004aec:	f104 0619 	add.w	r6, r4, #25
 8004af0:	e7f5      	b.n	8004ade <_printf_i+0x22e>
 8004af2:	bf00      	nop
 8004af4:	08004e45 	.word	0x08004e45
 8004af8:	08004e56 	.word	0x08004e56

08004afc <memcpy>:
 8004afc:	440a      	add	r2, r1
 8004afe:	4291      	cmp	r1, r2
 8004b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b04:	d100      	bne.n	8004b08 <memcpy+0xc>
 8004b06:	4770      	bx	lr
 8004b08:	b510      	push	{r4, lr}
 8004b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b12:	4291      	cmp	r1, r2
 8004b14:	d1f9      	bne.n	8004b0a <memcpy+0xe>
 8004b16:	bd10      	pop	{r4, pc}

08004b18 <memmove>:
 8004b18:	4288      	cmp	r0, r1
 8004b1a:	b510      	push	{r4, lr}
 8004b1c:	eb01 0402 	add.w	r4, r1, r2
 8004b20:	d902      	bls.n	8004b28 <memmove+0x10>
 8004b22:	4284      	cmp	r4, r0
 8004b24:	4623      	mov	r3, r4
 8004b26:	d807      	bhi.n	8004b38 <memmove+0x20>
 8004b28:	1e43      	subs	r3, r0, #1
 8004b2a:	42a1      	cmp	r1, r4
 8004b2c:	d008      	beq.n	8004b40 <memmove+0x28>
 8004b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b36:	e7f8      	b.n	8004b2a <memmove+0x12>
 8004b38:	4402      	add	r2, r0
 8004b3a:	4601      	mov	r1, r0
 8004b3c:	428a      	cmp	r2, r1
 8004b3e:	d100      	bne.n	8004b42 <memmove+0x2a>
 8004b40:	bd10      	pop	{r4, pc}
 8004b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b4a:	e7f7      	b.n	8004b3c <memmove+0x24>

08004b4c <_free_r>:
 8004b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b4e:	2900      	cmp	r1, #0
 8004b50:	d044      	beq.n	8004bdc <_free_r+0x90>
 8004b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b56:	9001      	str	r0, [sp, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b5e:	bfb8      	it	lt
 8004b60:	18e4      	addlt	r4, r4, r3
 8004b62:	f000 f913 	bl	8004d8c <__malloc_lock>
 8004b66:	4a1e      	ldr	r2, [pc, #120]	; (8004be0 <_free_r+0x94>)
 8004b68:	9801      	ldr	r0, [sp, #4]
 8004b6a:	6813      	ldr	r3, [r2, #0]
 8004b6c:	b933      	cbnz	r3, 8004b7c <_free_r+0x30>
 8004b6e:	6063      	str	r3, [r4, #4]
 8004b70:	6014      	str	r4, [r2, #0]
 8004b72:	b003      	add	sp, #12
 8004b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b78:	f000 b90e 	b.w	8004d98 <__malloc_unlock>
 8004b7c:	42a3      	cmp	r3, r4
 8004b7e:	d908      	bls.n	8004b92 <_free_r+0x46>
 8004b80:	6825      	ldr	r5, [r4, #0]
 8004b82:	1961      	adds	r1, r4, r5
 8004b84:	428b      	cmp	r3, r1
 8004b86:	bf01      	itttt	eq
 8004b88:	6819      	ldreq	r1, [r3, #0]
 8004b8a:	685b      	ldreq	r3, [r3, #4]
 8004b8c:	1949      	addeq	r1, r1, r5
 8004b8e:	6021      	streq	r1, [r4, #0]
 8004b90:	e7ed      	b.n	8004b6e <_free_r+0x22>
 8004b92:	461a      	mov	r2, r3
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	b10b      	cbz	r3, 8004b9c <_free_r+0x50>
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	d9fa      	bls.n	8004b92 <_free_r+0x46>
 8004b9c:	6811      	ldr	r1, [r2, #0]
 8004b9e:	1855      	adds	r5, r2, r1
 8004ba0:	42a5      	cmp	r5, r4
 8004ba2:	d10b      	bne.n	8004bbc <_free_r+0x70>
 8004ba4:	6824      	ldr	r4, [r4, #0]
 8004ba6:	4421      	add	r1, r4
 8004ba8:	1854      	adds	r4, r2, r1
 8004baa:	42a3      	cmp	r3, r4
 8004bac:	6011      	str	r1, [r2, #0]
 8004bae:	d1e0      	bne.n	8004b72 <_free_r+0x26>
 8004bb0:	681c      	ldr	r4, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	6053      	str	r3, [r2, #4]
 8004bb6:	4421      	add	r1, r4
 8004bb8:	6011      	str	r1, [r2, #0]
 8004bba:	e7da      	b.n	8004b72 <_free_r+0x26>
 8004bbc:	d902      	bls.n	8004bc4 <_free_r+0x78>
 8004bbe:	230c      	movs	r3, #12
 8004bc0:	6003      	str	r3, [r0, #0]
 8004bc2:	e7d6      	b.n	8004b72 <_free_r+0x26>
 8004bc4:	6825      	ldr	r5, [r4, #0]
 8004bc6:	1961      	adds	r1, r4, r5
 8004bc8:	428b      	cmp	r3, r1
 8004bca:	bf04      	itt	eq
 8004bcc:	6819      	ldreq	r1, [r3, #0]
 8004bce:	685b      	ldreq	r3, [r3, #4]
 8004bd0:	6063      	str	r3, [r4, #4]
 8004bd2:	bf04      	itt	eq
 8004bd4:	1949      	addeq	r1, r1, r5
 8004bd6:	6021      	streq	r1, [r4, #0]
 8004bd8:	6054      	str	r4, [r2, #4]
 8004bda:	e7ca      	b.n	8004b72 <_free_r+0x26>
 8004bdc:	b003      	add	sp, #12
 8004bde:	bd30      	pop	{r4, r5, pc}
 8004be0:	200001c4 	.word	0x200001c4

08004be4 <sbrk_aligned>:
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	4e0e      	ldr	r6, [pc, #56]	; (8004c20 <sbrk_aligned+0x3c>)
 8004be8:	460c      	mov	r4, r1
 8004bea:	6831      	ldr	r1, [r6, #0]
 8004bec:	4605      	mov	r5, r0
 8004bee:	b911      	cbnz	r1, 8004bf6 <sbrk_aligned+0x12>
 8004bf0:	f000 f8bc 	bl	8004d6c <_sbrk_r>
 8004bf4:	6030      	str	r0, [r6, #0]
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f000 f8b7 	bl	8004d6c <_sbrk_r>
 8004bfe:	1c43      	adds	r3, r0, #1
 8004c00:	d00a      	beq.n	8004c18 <sbrk_aligned+0x34>
 8004c02:	1cc4      	adds	r4, r0, #3
 8004c04:	f024 0403 	bic.w	r4, r4, #3
 8004c08:	42a0      	cmp	r0, r4
 8004c0a:	d007      	beq.n	8004c1c <sbrk_aligned+0x38>
 8004c0c:	1a21      	subs	r1, r4, r0
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f000 f8ac 	bl	8004d6c <_sbrk_r>
 8004c14:	3001      	adds	r0, #1
 8004c16:	d101      	bne.n	8004c1c <sbrk_aligned+0x38>
 8004c18:	f04f 34ff 	mov.w	r4, #4294967295
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	bd70      	pop	{r4, r5, r6, pc}
 8004c20:	200001c8 	.word	0x200001c8

08004c24 <_malloc_r>:
 8004c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c28:	1ccd      	adds	r5, r1, #3
 8004c2a:	f025 0503 	bic.w	r5, r5, #3
 8004c2e:	3508      	adds	r5, #8
 8004c30:	2d0c      	cmp	r5, #12
 8004c32:	bf38      	it	cc
 8004c34:	250c      	movcc	r5, #12
 8004c36:	2d00      	cmp	r5, #0
 8004c38:	4607      	mov	r7, r0
 8004c3a:	db01      	blt.n	8004c40 <_malloc_r+0x1c>
 8004c3c:	42a9      	cmp	r1, r5
 8004c3e:	d905      	bls.n	8004c4c <_malloc_r+0x28>
 8004c40:	230c      	movs	r3, #12
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	2600      	movs	r6, #0
 8004c46:	4630      	mov	r0, r6
 8004c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c4c:	4e2e      	ldr	r6, [pc, #184]	; (8004d08 <_malloc_r+0xe4>)
 8004c4e:	f000 f89d 	bl	8004d8c <__malloc_lock>
 8004c52:	6833      	ldr	r3, [r6, #0]
 8004c54:	461c      	mov	r4, r3
 8004c56:	bb34      	cbnz	r4, 8004ca6 <_malloc_r+0x82>
 8004c58:	4629      	mov	r1, r5
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	f7ff ffc2 	bl	8004be4 <sbrk_aligned>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	4604      	mov	r4, r0
 8004c64:	d14d      	bne.n	8004d02 <_malloc_r+0xde>
 8004c66:	6834      	ldr	r4, [r6, #0]
 8004c68:	4626      	mov	r6, r4
 8004c6a:	2e00      	cmp	r6, #0
 8004c6c:	d140      	bne.n	8004cf0 <_malloc_r+0xcc>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	4631      	mov	r1, r6
 8004c72:	4638      	mov	r0, r7
 8004c74:	eb04 0803 	add.w	r8, r4, r3
 8004c78:	f000 f878 	bl	8004d6c <_sbrk_r>
 8004c7c:	4580      	cmp	r8, r0
 8004c7e:	d13a      	bne.n	8004cf6 <_malloc_r+0xd2>
 8004c80:	6821      	ldr	r1, [r4, #0]
 8004c82:	3503      	adds	r5, #3
 8004c84:	1a6d      	subs	r5, r5, r1
 8004c86:	f025 0503 	bic.w	r5, r5, #3
 8004c8a:	3508      	adds	r5, #8
 8004c8c:	2d0c      	cmp	r5, #12
 8004c8e:	bf38      	it	cc
 8004c90:	250c      	movcc	r5, #12
 8004c92:	4629      	mov	r1, r5
 8004c94:	4638      	mov	r0, r7
 8004c96:	f7ff ffa5 	bl	8004be4 <sbrk_aligned>
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d02b      	beq.n	8004cf6 <_malloc_r+0xd2>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	442b      	add	r3, r5
 8004ca2:	6023      	str	r3, [r4, #0]
 8004ca4:	e00e      	b.n	8004cc4 <_malloc_r+0xa0>
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	1b52      	subs	r2, r2, r5
 8004caa:	d41e      	bmi.n	8004cea <_malloc_r+0xc6>
 8004cac:	2a0b      	cmp	r2, #11
 8004cae:	d916      	bls.n	8004cde <_malloc_r+0xba>
 8004cb0:	1961      	adds	r1, r4, r5
 8004cb2:	42a3      	cmp	r3, r4
 8004cb4:	6025      	str	r5, [r4, #0]
 8004cb6:	bf18      	it	ne
 8004cb8:	6059      	strne	r1, [r3, #4]
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	bf08      	it	eq
 8004cbe:	6031      	streq	r1, [r6, #0]
 8004cc0:	5162      	str	r2, [r4, r5]
 8004cc2:	604b      	str	r3, [r1, #4]
 8004cc4:	4638      	mov	r0, r7
 8004cc6:	f104 060b 	add.w	r6, r4, #11
 8004cca:	f000 f865 	bl	8004d98 <__malloc_unlock>
 8004cce:	f026 0607 	bic.w	r6, r6, #7
 8004cd2:	1d23      	adds	r3, r4, #4
 8004cd4:	1af2      	subs	r2, r6, r3
 8004cd6:	d0b6      	beq.n	8004c46 <_malloc_r+0x22>
 8004cd8:	1b9b      	subs	r3, r3, r6
 8004cda:	50a3      	str	r3, [r4, r2]
 8004cdc:	e7b3      	b.n	8004c46 <_malloc_r+0x22>
 8004cde:	6862      	ldr	r2, [r4, #4]
 8004ce0:	42a3      	cmp	r3, r4
 8004ce2:	bf0c      	ite	eq
 8004ce4:	6032      	streq	r2, [r6, #0]
 8004ce6:	605a      	strne	r2, [r3, #4]
 8004ce8:	e7ec      	b.n	8004cc4 <_malloc_r+0xa0>
 8004cea:	4623      	mov	r3, r4
 8004cec:	6864      	ldr	r4, [r4, #4]
 8004cee:	e7b2      	b.n	8004c56 <_malloc_r+0x32>
 8004cf0:	4634      	mov	r4, r6
 8004cf2:	6876      	ldr	r6, [r6, #4]
 8004cf4:	e7b9      	b.n	8004c6a <_malloc_r+0x46>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	603b      	str	r3, [r7, #0]
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	f000 f84c 	bl	8004d98 <__malloc_unlock>
 8004d00:	e7a1      	b.n	8004c46 <_malloc_r+0x22>
 8004d02:	6025      	str	r5, [r4, #0]
 8004d04:	e7de      	b.n	8004cc4 <_malloc_r+0xa0>
 8004d06:	bf00      	nop
 8004d08:	200001c4 	.word	0x200001c4

08004d0c <_realloc_r>:
 8004d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d10:	4680      	mov	r8, r0
 8004d12:	4614      	mov	r4, r2
 8004d14:	460e      	mov	r6, r1
 8004d16:	b921      	cbnz	r1, 8004d22 <_realloc_r+0x16>
 8004d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	f7ff bf81 	b.w	8004c24 <_malloc_r>
 8004d22:	b92a      	cbnz	r2, 8004d30 <_realloc_r+0x24>
 8004d24:	f7ff ff12 	bl	8004b4c <_free_r>
 8004d28:	4625      	mov	r5, r4
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d30:	f000 f838 	bl	8004da4 <_malloc_usable_size_r>
 8004d34:	4284      	cmp	r4, r0
 8004d36:	4607      	mov	r7, r0
 8004d38:	d802      	bhi.n	8004d40 <_realloc_r+0x34>
 8004d3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d3e:	d812      	bhi.n	8004d66 <_realloc_r+0x5a>
 8004d40:	4621      	mov	r1, r4
 8004d42:	4640      	mov	r0, r8
 8004d44:	f7ff ff6e 	bl	8004c24 <_malloc_r>
 8004d48:	4605      	mov	r5, r0
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d0ed      	beq.n	8004d2a <_realloc_r+0x1e>
 8004d4e:	42bc      	cmp	r4, r7
 8004d50:	4622      	mov	r2, r4
 8004d52:	4631      	mov	r1, r6
 8004d54:	bf28      	it	cs
 8004d56:	463a      	movcs	r2, r7
 8004d58:	f7ff fed0 	bl	8004afc <memcpy>
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	4640      	mov	r0, r8
 8004d60:	f7ff fef4 	bl	8004b4c <_free_r>
 8004d64:	e7e1      	b.n	8004d2a <_realloc_r+0x1e>
 8004d66:	4635      	mov	r5, r6
 8004d68:	e7df      	b.n	8004d2a <_realloc_r+0x1e>
	...

08004d6c <_sbrk_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4d06      	ldr	r5, [pc, #24]	; (8004d88 <_sbrk_r+0x1c>)
 8004d70:	2300      	movs	r3, #0
 8004d72:	4604      	mov	r4, r0
 8004d74:	4608      	mov	r0, r1
 8004d76:	602b      	str	r3, [r5, #0]
 8004d78:	f7fc f884 	bl	8000e84 <_sbrk>
 8004d7c:	1c43      	adds	r3, r0, #1
 8004d7e:	d102      	bne.n	8004d86 <_sbrk_r+0x1a>
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	b103      	cbz	r3, 8004d86 <_sbrk_r+0x1a>
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	bd38      	pop	{r3, r4, r5, pc}
 8004d88:	200001cc 	.word	0x200001cc

08004d8c <__malloc_lock>:
 8004d8c:	4801      	ldr	r0, [pc, #4]	; (8004d94 <__malloc_lock+0x8>)
 8004d8e:	f000 b811 	b.w	8004db4 <__retarget_lock_acquire_recursive>
 8004d92:	bf00      	nop
 8004d94:	200001d0 	.word	0x200001d0

08004d98 <__malloc_unlock>:
 8004d98:	4801      	ldr	r0, [pc, #4]	; (8004da0 <__malloc_unlock+0x8>)
 8004d9a:	f000 b80c 	b.w	8004db6 <__retarget_lock_release_recursive>
 8004d9e:	bf00      	nop
 8004da0:	200001d0 	.word	0x200001d0

08004da4 <_malloc_usable_size_r>:
 8004da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da8:	1f18      	subs	r0, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bfbc      	itt	lt
 8004dae:	580b      	ldrlt	r3, [r1, r0]
 8004db0:	18c0      	addlt	r0, r0, r3
 8004db2:	4770      	bx	lr

08004db4 <__retarget_lock_acquire_recursive>:
 8004db4:	4770      	bx	lr

08004db6 <__retarget_lock_release_recursive>:
 8004db6:	4770      	bx	lr

08004db8 <_init>:
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	bf00      	nop
 8004dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dbe:	bc08      	pop	{r3}
 8004dc0:	469e      	mov	lr, r3
 8004dc2:	4770      	bx	lr

08004dc4 <_fini>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	bf00      	nop
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr
